@using Models;
@using Models._Utils;
@using DevExpress.Data.Filtering;

@{
    GridViewModel viewModel = Model;

    var cpGvFind_FilterExpression = GetSqlFromGridViewModelState.getSqlCriteria(viewModel);
    var cpGvFind_SortExpression = GetSqlFromGridViewModelState.getSqlSort(viewModel);
    var cpGvFind_PageIndex = viewModel.Pager.PageIndex;
    var cpGvFind_PageSize = viewModel.Pager.PageSize;
}


@Html.DevExpress().GridView(settings =>
   {
       settings.Name = "gvPaymentInList";
       settings.KeyFieldName = "Tx_PaymentIn___.Id";
       settings.CallbackRouteValues = new { Controller = "PaymentIn", Action = "ListPartial" };

       settings.Columns.Add(column =>
       {
           column.Caption = "#";

           column.SetDataItemTemplateContent(c =>
           {

               ViewContext.Writer.Write(

                Html.DevExpress().HyperLink(settingsHL =>
                {
                    settingsHL.Name = "gvPaymentInList_Choose_" + Guid.NewGuid().ToString();
                    settingsHL.NavigateUrl = "javascript:void(0)";
                    settingsHL.Properties.Text = "Choose";
                    settingsHL.Properties.ClientSideEvents.Click = string.Format("function(s, e) {{ OnClickChoose(s, e, '{0}'); }}", DataBinder.Eval(c.DataItem, "Tx_PaymentIn___.Id"));
                }).GetHtml()


            );
           });
           column.SetHeaderTemplateContent(c =>
           {
               ViewContext.Writer.Write(
                  "#Action#"
               );
           });

           column.Settings.AllowDragDrop = DefaultBoolean.False;
           column.Settings.AllowSort = DefaultBoolean.False;
           column.Width = 70;
       });

       settings.Settings.ShowFilterRow = true;
       settings.Settings.ShowFilterRowMenu = true;

       settings.Columns.Add("Tx_PaymentIn___.Id", "Id").Visible = false;
       settings.Columns.Add("Tx_PaymentIn___.TransNo", "Payment No").Width = 150;
       settings.Columns.Add(column =>
       {
           column.FieldName = "Tx_PaymentIn___.DocDate";
           column.Name = "DocDate";
           column.Caption = "Payment Date";
           column.ColumnType = MVCxGridViewColumnType.DateEdit;
           column.Width = 90;
           var txt = column.PropertiesEdit as DateEditProperties;
           txt.DisplayFormatString = "dd/MM/yyyy";
           txt.EditFormatString = "dd/MM/yyyy";
       });

       settings.Columns.Add(column =>
       {
           column.FieldName = "Tx_PaymentIn___.BpName";
           column.Name = "BpName";
           column.Caption = "BP Name";
           column.Width = 200;
           column.ColumnType = MVCxGridViewColumnType.TextBox;

           column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
           column.SetDataItemTemplateContent(c =>
           {

               string valText = (string)DataBinder.Eval(c.DataItem, "Tx_PaymentIn___.BpName");
               if (valText != null)
               {
                   ViewContext.Writer.Write(valText.ToUpper());
               }

           });

           
       });

       settings.Columns.Add(column =>
       {
           column.FieldName = "Tx_PaymentIn___.PaymentCode";
           column.Name = "PaymentCode";
           column.Caption = "Payment Code";
           column.Width = 100;
           column.ColumnType = MVCxGridViewColumnType.TextBox;

           column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
       });

       settings.Columns.Add("Tx_PaymentIn___.CurCode", "Currency").Width=70;
       settings.Columns.Add(column =>
       {
           column.FieldName = "Tx_PaymentIn___.AmountTc";
           column.Name = "AmountTc";
           column.Caption = "Amount";
           column.HeaderStyle.HorizontalAlign = HorizontalAlign.Right;

           column.Width = 100;
           column.ColumnType = MVCxGridViewColumnType.SpinEdit;

           var txt = column.PropertiesEdit as SpinEditProperties;
           txt.NumberType = SpinEditNumberType.Float;
           txt.DisplayFormatString = "#,###.00";
           txt.DisplayFormatInEditMode = true;

           txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
       });
       
       settings.Columns.Add("Ts_List___Category.Name", "Category");
       settings.Columns.Add("Tm_User___.UserName", "User");
       settings.Columns.Add("Ts_List___Status.Name", "Status");


       settings.SettingsPager.Position = PagerPosition.Bottom;
       settings.SettingsPager.FirstPageButton.Visible = true;
       settings.SettingsPager.LastPageButton.Visible = true;
       settings.SettingsPager.AlwaysShowPager = true;
       //settings.Width = System.Web.UI.WebControls.Unit.Percentage(70); 


       if (cpGvFind_PageIndex == 0)
       {
           settings.SettingsPager.PageSizeItemSettings.Visible = true;
       }


       settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };


       settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
       settings.Settings.VerticalScrollableHeight = 400;
       //settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);

       settings.SettingsBehavior.AllowFocusedRow = true;
       settings.Settings.ShowFilterBar = GridViewStatusBarMode.Hidden;

       settings.CustomBindingRouteValuesCollection.Add(
           GridViewOperationType.Paging,
           new { Controller = "PaymentIn", Action = "ListPaging" }
       );

       settings.CustomBindingRouteValuesCollection.Add(
           GridViewOperationType.Filtering,
           new { Controller = "PaymentIn", Action = "ListFiltering" }
       );

       settings.CustomBindingRouteValuesCollection.Add(
           GridViewOperationType.Sorting,
           new { Controller = "PaymentIn", Action = "ListSorting" }
       );


       settings.CustomJSProperties = (sender, e) =>
       {
           e.Properties["cpGvFind_FilterExpression"] = cpGvFind_FilterExpression;
           e.Properties["cpGvFind_SortExpression"] = cpGvFind_SortExpression;
           e.Properties["cpGvFind_PageIndex"] = cpGvFind_PageIndex;
           e.Properties["cpGvFind_PageSize"] = cpGvFind_PageSize;
       };


       foreach (GridViewDataColumn column in settings.Columns)
       {
           column.Settings.AllowAutoFilterTextInputTimer = DevExpress.Utils.DefaultBoolean.False;
       }

       settings.BeforeGetCallbackResult = (sender, e) =>
       {
           MVCxGridView gridView = sender as MVCxGridView;
           Models._Utils.General.GridViewFilterExpression(gridView, settings);
       };

       string additionParam = "e.customArgs['hidden_IsFindTransDate']=IsFindTransDate.GetValue();";
       additionParam += "e.customArgs['hidden_TransDate_From']=(TransDate_From.GetDate()!=null)?TransDate_From.GetDate().ToIduyyyymmdd():'';";
       additionParam += "e.customArgs['hidden_TransDate_To']=(TransDate_To.GetDate()!=null)?TransDate_To.GetDate().ToIduyyyymmdd():'';";
     

       settings.ClientSideEvents.BeginCallback = string.Format("function(s, e) {{ {0} }}", additionParam);



   }).BindToCustomData(Model).GetHtml()
