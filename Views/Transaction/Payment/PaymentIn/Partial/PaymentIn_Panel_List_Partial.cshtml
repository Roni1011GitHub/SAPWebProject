@Html.DevExpress().PopupControl(settings =>
{
    settings.Name = "popupList";
    settings.CallbackRouteValues = new { Controller = "PaymentIn", Action = "PopupListLoadOnDemandPartial" };
    settings.CloseAction = CloseAction.OuterMouseClick;
    settings.PopupVerticalAlign = PopupVerticalAlign.Below;
    settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;

    settings.CloseAnimationType = AnimationType.Fade;
    settings.PopupAnimationType = AnimationType.Fade;   

   

    settings.ShowFooter = true;
    settings.AllowDragging = true;
    settings.AllowResize = true;
    settings.ShowCollapseButton = true;
    settings.ShowMaximizeButton = true;
    settings.ShowRefreshButton = true;
    settings.FooterText = "";
    settings.Styles.Footer.Paddings.Padding = 0;
    
    settings.ShowPageScrollbarWhenModal = true;

    settings.EnableHotTrack = true;
    
    
    settings.LoadContentViaCallback = LoadContentViaCallback.OnFirstShow;
    settings.PopupElementID = "ShowButton";
    settings.HeaderText = "List Incoming Payment";
   
    settings.SetContent(() =>
    {

        //Html.DevExpress().HyperLink(settingsHL =>
        //{
        //    settingsHL.Name = "gvPaymentInList_GvExportTo";
        //    settingsHL.NavigateUrl = "javascript:void(0)";
        //    settingsHL.Properties.Text = "Excel";
        //    settingsHL.Properties.ClientSideEvents.Click = string.Format("function(s, e) {{ GvExportTo(gvPaymentInList, '{0}'); }}", @Url.Action("ExportTo", "PaymentIn"));
        //    settingsHL.Height = 20;
        //}).GetHtml();


        Html.DevExpress().HyperLink(settingsChoose =>
        {
            settingsChoose.Name = "gvPanelListCancel";
            settingsChoose.NavigateUrl = "javascript:void(0)";
            settingsChoose.Properties.Text = "Cancel";
            settingsChoose.Height = 20;
            settingsChoose.Properties.ClientSideEvents.Click = "function(s, e) { popupList.Hide(); }";
        }).GetHtml(); 
      

        Html.DevExpress().FormLayout(settingtab =>
        {
            settingtab.Name = "formLayoutTabPaymentInFindTransDate";
            settingtab.EncodeHtml = false;

            //settingtab.Width = Unit.Percentage(100);
            settingtab.AlignItemCaptionsInAllGroups = true;
            settingtab.ShowItemCaptionColon = false;

            var groupItemtab = settingtab.Items.AddGroupItem(itemSettings =>
            {
                itemSettings.Caption = "";
                itemSettings.ShowCaption = DefaultBoolean.False;
                itemSettings.SettingsItemHelpTexts.Position = HelpTextPosition.Bottom;
                itemSettings.GroupBoxDecoration = GroupBoxDecoration.None;
                itemSettings.ColCount = 1;


            });

            var groupItem_Col1 = groupItemtab.Items.AddGroupItem(itemSettings =>
            {

                itemSettings.SettingsItemHelpTexts.Position = HelpTextPosition.Top;
                itemSettings.GroupBoxDecoration = GroupBoxDecoration.None;
                itemSettings.ShowCaption = DefaultBoolean.False;
                itemSettings.ColCount = 3;
            });
            
            groupItem_Col1.Items.Add(itemSettings =>
            {
                itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.CheckBox;
                itemSettings.Caption = "Payment Date";
                itemSettings.CaptionSettings.HorizontalAlign = FormLayoutHorizontalAlign.Left;
                var cb = (CheckBoxSettings)itemSettings.NestedExtensionSettings;
                cb.Name = "IsFindTransDate";
                cb.ShowModelErrors = true;
                //cb.Width = 100; 

                cb.ControlStyle.CssClass = "editor";
                cb.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                cb.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.Lavender;
                cb.Checked = true; 
                cb.Properties.ClientSideEvents.CheckedChanged = "function(s,e) {{  gvPaymentInList.PerformCallback(); }}";
 
            });

            groupItem_Col1.Items.Add(itemSettings =>
            {
                itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.DateEdit;
                itemSettings.Caption = "From Date";
                itemSettings.ShowCaption = DefaultBoolean.False;
                var txt = (DateEditSettings)itemSettings.NestedExtensionSettings;
                txt.Name = "TransDate_From";
                txt.ShowModelErrors = true;
                txt.Width = 100;
                txt.Date = DateTime.Now.Date.AddDays((DateTime.Now.Day-1) * -1);

                txt.ControlStyle.CssClass = "editor";
                txt.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                txt.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.Lavender;
                txt.Properties.NullText = "dd/MM/yyyy";
                txt.Properties.EditFormat = EditFormat.Custom;
                txt.Properties.EditFormatString = "dd/MM/yyyy";
                txt.Properties.DisplayFormatInEditMode = true;


                txt.Properties.ClientSideEvents.ValueChanged = "function(s,e) {{   if(IsFindTransDate.GetValue()) {  gvPaymentInList.PerformCallback(); } }}";
                txt.Properties.ClientSideEvents.ParseDate = "function (s,e){ { ParseDateEdit(s,e); if(IsFindTransDate.GetValue()) {  gvPaymentInList.PerformCallback(); } } }";
            });

            groupItem_Col1.Items.Add(itemSettings =>
            {
                itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.DateEdit;
                itemSettings.Caption = "To Date";
                itemSettings.ShowCaption = DefaultBoolean.False;
                var txt = (DateEditSettings)itemSettings.NestedExtensionSettings;
                txt.Name = "TransDate_To";
                txt.ShowModelErrors = true;
                txt.Width = 100;
                txt.Date = DateTime.Now.Date;
               

                txt.ControlStyle.CssClass = "editor";
                txt.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                txt.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.Lavender;
                txt.Properties.NullText = "dd/MM/yyyy";
                txt.Properties.EditFormat = EditFormat.Custom;
                txt.Properties.EditFormatString = "dd/MM/yyyy";
                txt.Properties.DisplayFormatInEditMode = true;


                txt.Properties.ClientSideEvents.ValueChanged = "function(s,e) {{ if(IsFindTransDate.GetValue()) {  gvPaymentInList.PerformCallback(); } }}";
                txt.Properties.ClientSideEvents.ParseDate = "function (s,e){ { ParseDateEdit(s,e); if(IsFindTransDate.GetValue()) {  gvPaymentInList.PerformCallback(); } } }";

            });
           

        }).GetHtml();
        
      

       

        Html.RenderPartial("Partial/PaymentIn_List_Partial");
        
    });

    settings.ClientSideEvents.Resize = string.Format("function(s, e) {{ GridviewInPopupAdjustSize(popupList,gvPaymentInList,50); }}", "");
    settings.ClientSideEvents.EndCallback = string.Format("function(s, e) {{ GridviewInPopupAdjustSize(popupList,gvPaymentInList,50); }}", "");


    settings.PreRender = (sender, e) =>
    {
        ASPxPopupControl popup = (ASPxPopupControl)sender;
        popup.Width = 1000;
        popup.Height = 600;
    };
    
}).GetHtml()