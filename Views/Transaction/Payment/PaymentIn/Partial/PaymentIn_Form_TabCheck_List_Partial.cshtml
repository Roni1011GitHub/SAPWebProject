@using Models;

@{ 
    var Id = Convert.ToInt64(Request["cbId"]);

    if (ViewBag.Id != null)
    {
        Id = ViewBag.Id;
    }


    if (ViewBag.ReadOnly == null)
    {
        ViewBag.ReadOnly = false;
        string status = Models._PetaPoco.DbProvider.dbApp.ExecuteScalar<string>("SELECT TOP 1 T0.Status FROM Tx_PaymentIn T0 WHERE T0.Id=@0", Id);
        if (status != "Draft")
        {
            ViewBag.ReadOnly = true;
        }
    }
    
}


@Html.DevExpress().GridView(settings =>
{
    settings.Name = "gvPaymentInCheckDetail";
    settings.KeyFieldName = "DetId";
    settings.Width = Unit.Percentage(100);

    settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
    settings.Settings.VerticalScrollableHeight = 150;
    settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;

    settings.SettingsEditing.Mode = GridViewEditingMode.Batch;
    settings.SettingsEditing.BatchEditSettings.EditMode = GridViewBatchEditMode.Row;
    settings.SettingsEditing.BatchEditSettings.StartEditAction = GridViewBatchStartEditAction.Click;
    settings.SettingsEditing.NewItemRowPosition = GridViewNewItemRowPosition.Bottom;


    settings.CommandColumn.Visible = !ViewBag.ReadOnly;

    settings.CommandColumn.ShowDeleteButton = false;
    settings.CommandColumn.ShowNewButtonInHeader = true;
    settings.Enabled = true;

    settings.CommandColumn.Width = 50;

    settings.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;


    GridViewCommandColumnCustomButton customButton = new GridViewCommandColumnCustomButton() { ID = "deleteButton", Text = "Delete" };
    settings.CommandColumn.CustomButtons.Add(customButton);

    settings.ClientSideEvents.CustomButtonClick = "gvPaymentInCheckDetailOnCustomButtonClick";



    settings.Columns.Add(column =>
    {

        column.Caption = "Due Date";
        column.Name = "DueDate";
        column.FieldName = "DueDate";
        column.ColumnType = MVCxGridViewColumnType.DateEdit;
        column.Settings.AllowSort = DefaultBoolean.False;
        var txt = column.PropertiesEdit as DateEditProperties;
        //txt.UseMaskBehavior = true;
        txt.DisplayFormatString = "dd/MM/yyyy";
        txt.EditFormatString = "d/M/yy";
        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
        txt.ValidationSettings.Display = Display.Dynamic;


        txt.ClientSideEvents.ParseDate = "function (s,e){ { ParseDateEdit(s,e); } }";

        if (ViewBag.ReadOnly)
        {
            column.PropertiesEdit.Style.BackColor = System.Drawing.Color.Lavender;
            column.CellStyle.BackColor = System.Drawing.Color.Lavender;
            column.ReadOnly = true;
        }
    });

    
    settings.Columns.Add(column =>
    {
        column.FieldName = "BankCode";
        column.Name = "BankCode";
        column.Caption = "Bank";
        column.ColumnType = MVCxGridViewColumnType.ComboBox;
        column.Settings.AllowSort = DefaultBoolean.False;
        column.Width = 200;


        if (!ViewBag.ReadOnly)
        {
            column.SetEditItemTemplateContent(c =>
            {

                ViewContext.Writer.Write(
                     Html.Partial("Partial/PaymentIn_Form_TabCheck_BankCheckComboBox_Partial")
                 );

            });
        }


        if (ViewBag.ReadOnly)
        {
            column.PropertiesEdit.Style.BackColor = System.Drawing.Color.Lavender;
            column.CellStyle.BackColor = System.Drawing.Color.Lavender;
            column.EditFormSettings.Visible = DefaultBoolean.False;
        }

    });


    //settings.Columns.Add(column =>
    //{
    //    column.FieldName = "BankName";
    //    column.Name = "BankName";
    //    column.Caption = "Bank Name";

    //    column.ColumnType = MVCxGridViewColumnType.TextBox;
    //    column.Width = 150;
    //    //column.ReadOnly = true;
    //    column.Settings.AllowSort = DefaultBoolean.False;


    //    var txt = column.PropertiesEdit as TextBoxProperties;
    //    txt.DisplayFormatInEditMode = false;
    //    txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
    //    txt.ReadOnlyStyle.BackColor = System.Drawing.Color.Lavender;

    //    if (ViewBag.ReadOnly)
    //    {
    //        column.PropertiesEdit.Style.BackColor = System.Drawing.Color.Lavender;
    //        column.CellStyle.BackColor = System.Drawing.Color.Lavender;
    //        column.ReadOnly = true;
    //    }

    //});


    settings.Columns.Add(column =>
    {
        column.FieldName = "CheckNo";
        column.Name = "CheckNo";
        column.Caption = "Cheque No";


        column.ColumnType = MVCxGridViewColumnType.SpinEdit;
        column.Width = 150;
        //column.ReadOnly = true;
        column.Settings.AllowSort = DefaultBoolean.False;
        column.HeaderStyle.HorizontalAlign = HorizontalAlign.Left;
        column.EditCellStyle.HorizontalAlign = HorizontalAlign.Left;
        column.CellStyle.HorizontalAlign = HorizontalAlign.Left;


        column.ColumnType = MVCxGridViewColumnType.SpinEdit;
        var txt = column.PropertiesEdit as SpinEditProperties;
        txt.NumberType = SpinEditNumberType.Integer;
        //txt.DisplayFormatString = "#,###.00";
        txt.DisplayFormatInEditMode = true;
        txt.AllowMouseWheel = false;
        txt.ValidationSettings.Display = Display.Dynamic;
        txt.Style.HorizontalAlign = HorizontalAlign.Left;

        if (ViewBag.ReadOnly)
        {
            column.PropertiesEdit.Style.BackColor = System.Drawing.Color.Lavender;
            column.CellStyle.BackColor = System.Drawing.Color.Lavender;
            column.ReadOnly = true;
        }



    });


    settings.Columns.Add(column =>
    {
        column.FieldName = "AmountTc";
        column.Name = "AmountTc";
        column.Caption = "Total";
        column.HeaderStyle.HorizontalAlign = HorizontalAlign.Right;
        column.Width = 120;
        column.Settings.AllowSort = DefaultBoolean.False;
        //column.ReadOnly = true; 

        column.ColumnType = MVCxGridViewColumnType.SpinEdit;
        var txt = column.PropertiesEdit as SpinEditProperties;
        txt.NumberType = SpinEditNumberType.Float;
        txt.DisplayFormatString = "#,###.00";
        txt.DisplayFormatInEditMode = true;
        txt.AllowMouseWheel = false;

        txt.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        txt.Style.HorizontalAlign = HorizontalAlign.Right;
        txt.ReadOnlyStyle.BackColor = System.Drawing.Color.Lavender;

        ASPxSummaryItem summaryItem = new ASPxSummaryItem(column.FieldName, DevExpress.Data.SummaryItemType.Sum);
        summaryItem.Tag = column.FieldName + "_Sum";
        summaryItem.DisplayFormat = "{0}";
        settings.TotalSummary.Add(summaryItem);

        column.SetFooterTemplateContent(c =>
        {
            Html.DevExpress().Label(lbSettings =>
            {
                string fieldName = (c.Column as GridViewDataColumn).FieldName;
                lbSettings.Name = "gvPaymentInCheckDetailLabel" + fieldName + "Sum";
                lbSettings.Properties.EnableClientSideAPI = true;
                ASPxSummaryItem summaryItem1 = c.Grid.TotalSummary.First(i => i.Tag == (fieldName + "_Sum"));
                lbSettings.Text = decimal.Parse(c.Grid.GetTotalSummaryValue(summaryItem1).ToString()).ToString("#,###.00");

                lbSettings.CustomJSProperties = (sender, e) =>
                {
                    e.Properties["cpValue"] = c.Grid.GetTotalSummaryValue(summaryItem1).ToString();
                };

            }).Render();
        });

        if (ViewBag.ReadOnly)
        {
            column.PropertiesEdit.Style.BackColor = System.Drawing.Color.Lavender;
            column.CellStyle.BackColor = System.Drawing.Color.Lavender;
            column.ReadOnly = true;
        }


    });



    settings.Columns.Add(column =>
    {
        column.FieldName = "CountryCode";
        column.Name = "CountryCode";
        column.Caption = "Country";
        column.ColumnType = MVCxGridViewColumnType.ComboBox;
        column.Settings.AllowSort = DefaultBoolean.False;
        column.Width = 0;

        var cbo = column.PropertiesEdit as ComboBoxProperties;
        // cbo.DataSource = Models._Utils.GeneralGetList.GetCountries();
        cbo.ClientInstanceName = "gvPaymentInCheckDetail_CountryCode";
        cbo.TextField = "CountryName";
        cbo.ValueField = "CountryCode";
        cbo.ValueType = typeof(string);
        cbo.DropDownStyle = DropDownStyle.DropDownList;
        cbo.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
        cbo.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;

        if (ViewBag.ReadOnly)
        {
            column.PropertiesEdit.Style.BackColor = System.Drawing.Color.Lavender;
            column.CellStyle.BackColor = System.Drawing.Color.Lavender;
            column.ReadOnly = true;
        }
    });


    settings.CellEditorInitialize = (s, e) =>
    {
        ASPxEdit editor = (ASPxEdit)e.Editor;
        editor.ValidationSettings.Display = Display.Dynamic;
    };


    settings.Settings.ShowFooter = true;

    settings.ClientSideEvents.BatchEditStartEditing = "gvPaymentInCheckDetailOnBatchEditStartEditing";
    settings.ClientSideEvents.BatchEditEndEditing = "gvPaymentInCheckDetailOnBatchEditEndEditing";
    settings.ClientSideEvents.BatchEditRowValidating = "gvPaymentInCheckDetailOnBatchEditRowValidating";



    settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;



    settings.InitNewRow = (sender, e) =>
    {
        e.NewValues["CountryCode"] = "ID";
    };



}).Bind(Model).GetHtml()
