@using Models._Cfl;


@if (false)
{
    <script src="~/Scripts/ASPxScriptIntelliSense.js" type="text/javascript"></script>}

@model Models.Transaction.PaymentIn.PaymentInModel


@{
    ViewBag.Title = "Incoming Payment";
    var branchCode = Session["branchCode"];
}


<script type="text/javascript">

    $(document).ready(function () {

        SetBtnStatus();

        RefreshCategory();
    }
    );

</script>

<script type="text/javascript">


    $.ajaxSetup({
        cache: false
    });

    function OnBegin() {
        loadingPanel.Show();
    }

    function SetBtnStatus() {

        var grpBtnAdd = formLayouBtn.GetItemByName('grpBtnAdd');
        var btnAdd = ASPxClientButton.Cast('btnAdd');
        var grpBtnUpdate = formLayouBtn.GetItemByName('grpBtnUpdate');
        var btnUpdate = ASPxClientButton.Cast('btnUpdate');


        var btnRefresh = ASPxClientButton.Cast('btnRefresh');

        var btnPrint = ASPxClientButton.Cast('btnPrint');


        var btnMenuOther = ASPxClientMenu.Cast('btnMenuOther');

        var formMode = '';
        if ((Id.GetValue() == '') || Id.GetValue() == '0') {
            formMode = 'new';
        } else {
            formMode = 'edit';
        }

        var Status = ASPxClientComboBox.Cast('Status');

        if (Status.GetValue() != 'Draft') {
            btnMenuOther.GetItemByName("btnMenuViewJe").SetEnabled(true);
        } else {
            btnMenuOther.GetItemByName("btnMenuViewJe").SetEnabled(false);
        }

        switch (formMode) {
            case 'new':

                grpBtnAdd.SetVisible(true);
                grpBtnUpdate.SetVisible(false);

                btnAdd.SetEnabled(true);
                btnUpdate.SetEnabled(false);
                btnRefresh.SetEnabled(false);
                btnPrint.SetEnabled(false);

                btnMenuOther.GetItemByName("btnMenuSetStatusPost").SetEnabled(false);

                btnMenuOther.GetItemByName("btnMenuSetStatusCancel").SetEnabled(false);

                break;
            case 'edit':

                grpBtnAdd.SetVisible(false);
                grpBtnUpdate.SetVisible(true);


                btnAdd.SetEnabled(false);
                btnRefresh.SetEnabled(true);
                btnPrint.SetEnabled(true);

                var Status = ASPxClientComboBox.Cast('Status');

                switch (Status.GetValue()) {
                    case 'Draft':
                        btnUpdate.SetEnabled(true);
                        btnMenuOther.GetItemByName("btnMenuSetStatusPost").SetEnabled(true);
                        btnMenuOther.GetItemByName("btnMenuSetStatusCancel").SetEnabled(true);
                        break;
                    case 'Posted':
                        btnUpdate.SetEnabled(false);
                        btnMenuOther.GetItemByName("btnMenuSetStatusPost").SetEnabled(false);
                        btnMenuOther.GetItemByName("btnMenuSetStatusCancel").SetEnabled(true);
                        break;
                    case 'Cancel':
                        btnUpdate.SetEnabled(true);
                        btnMenuOther.GetItemByName("btnMenuSetStatusPost").SetEnabled(false);
                        btnMenuOther.GetItemByName("btnMenuSetStatusCancel").SetEnabled(false);
                        break;


                    default:
                        break;
                }


                break;
            default:

                break;
        }



    }

    var msgCount = 0;
    function OnSuccess() {

        $("#MessageText").html('<p>' + '(' + (++msgCount) + ') ' + 'Action success</p>' + $("#MessageText").html());

    }


    function OnSuccessMsgBox() {

        loadingPanel.Hide();

        $("#MessageText").html('<p>' + '(' + (++msgCount) + ') ' + 'Action success</p>' + $("#MessageText").html());

        popupSuccess.Show();
        setTimeout(function () { popupSuccess.Hide(); }, 1000);


    }

    function OnFailure(jqXhr, textStatus, errorThrown) {

        if (jqXhr.responseText.substring(0, 12) == "[VALIDATION]") {
            $("#MessageText").html('<p>' + '(' + (++msgCount) + ') ' + jqXhr.responseText + '</p>' + $("#MessageText").html());

            loadingPanel.Hide()
            alert(jqXhr.responseText);
        }
        else {
            // untuk error yg tidak ter capture di validation
            var doc = jqXhr.responseText.match(/.*<title>([\s\S]*)<\/title>.*/);
            $("#MessageText").html('<p>' + '(' + (++msgCount) + ') ' + doc[1] + '</p>' + $("#MessageText").html());

            loadingPanel.Hide();
            alert(doc[1]);
        }

    }

    function OnComplete() {
        loadingPanel.Hide();


    }

    function BeforeSave() {
        if (!($("#formDetail").valid())) {
            var validator = $("#formDetail").validate();
            var errors = validator.numberOfInvalids();
            if (errors) {
                // alert( validator.errorList[0].message);
                validator.errorList[0].element.focus();

            }
            return false;
        }
        return true;
    }

    function RefreshAfterSuccess(response) {
        $("#contentForm").html(response);
        $.validator.unobtrusive.parse("#formDetail");
        MVCxClientUtils.FinalizeCallback();
        SetBtnStatus();

        RefreshCategory();

    }

    function OnClickBtnNew(s, e) {

        $.ajax({
            type: "POST",
            url: "@Url.Action("DetailPartial", "PaymentIn")",
            beforeSend: function () {
                OnBegin();
            },

            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccess();
            },

            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },

            complete: function () {
                OnComplete()
            }
        });

    }

    function GetFormData() {
        var formData = $('#formDetail').serializeObject();

        var DetailChecks_ = GetGvDetails('gvPaymentInCheckDetail');
        var DetailCcs_ = GetGvDetails('gvPaymentInCcDetail');

        var DetailAccounts_ = GetGvDetails('gvPaymentInAccountDetail');
        var DetailArCorporates_ = GetGvDetails('gvPaymentInArCorporateDetail');


        $.extend(formData, { DetailChecks_: DetailChecks_, DetailCcs_: DetailCcs_, DetailAccounts_: DetailAccounts_, DetailArCorporates_: DetailArCorporates_ });
        return formData;
    }

    function OnClickBtnAdd(s, e) {
        if (BeforeSave() == false) {
            return;
        }

        var formData = GetFormData();

        $.ajax({
            type: "POST",
            url: '@Url.Action("Add", "PaymentIn")',
            data: formData,
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccessMsgBox();
            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete();
            }
        });
    }

    function OnClickBtnUpdate(s, e) {
        if (BeforeSave() == false) {
            return;
        }

        var formData = GetFormData();

        $.ajax({
            type: "POST",
            url: '@Url.Action("Update", "PaymentIn")',
            data: formData,
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccessMsgBox();

            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()

            }
        });

    }




    function OnClickBtnNavFirst(s, e) {
        $.ajax({
            type: "POST",
            url: "@Url.Action("NavFirst", "PaymentIn")",
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccess();
            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()
            }
        });
    }

    function OnClickBtnNavPrevious(s, e) {
        key = Id.GetValue();

        $.ajax({
            type: "POST",
            url: '@Url.Action("NavPrevious", "PaymentIn")',
            data: { Id: key },
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccess();
            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()
            }
        });
    }

    function OnClickBtnNavNext(s, e) {
        key = Id.GetValue();
        $.ajax({
            type: "POST",
            url: '@Url.Action("NavNext", "PaymentIn")',
            data: { Id: key },
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccess();
            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()
            }
        });
    }



    function OnClickBtnNavLast(s, e) {
        $.ajax({
            type: "POST",
            url: "@Url.Action("NavLast", "PaymentIn")",
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccess();

            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()
            }
        });
    }


    function OnClickBtnRefresh(s, e) {
        key = Id.GetValue();

        $.ajax({
            type: "POST",
            url: '@Url.Action("DetailPartial", "PaymentIn")',
            data: { Id: key },
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                RefreshAfterSuccess(response);
                OnSuccess();

            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()
            }
        });
    }


    function OnClickBtnListFind(s, e) {
        var popup = ASPxClientPopupControl.Cast("popupList");

        var gv = ASPxClientGridView.Cast('gvPaymentInList');
        if (gv == null) {
            popup.Show();
        } else {
            popup.SetContentHtml("");
            popup.PerformCallback();
            popup.Show();
        }

    }

    function OnClickBtnPrint(s, e) {
        popupPrint.ShowAtPos(250, 100);
    }

    function OnClickBtnMenuOther(s, e) {

        switch (e.item.name) {

            case 'btnMenuSetStatusPost':
                if (confirm('Post transaction?')) {
                    key = Id.GetValue();

                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("Post", "PaymentIn")',
                        data: { Id: key },
                        beforeSend: function () {
                            OnBegin();
                        },
                        success: function (response) {
                            RefreshAfterSuccess(response);
                            OnSuccessMsgBox();

                        },
                        error: function (jqXhr, textStatus, errorThrown) {
                            OnFailure(jqXhr, textStatus, errorThrown)
                        },
                        complete: function () {
                            OnComplete()
                        }
                    });
                }

                break;

            case 'btnMenuSetStatusCancel':
                if (confirm('Cancel transaction?')) {
                    key = Id.GetValue();

                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("Cancel", "PaymentIn")',
                        data: { Id: key },
                        beforeSend: function () {
                            OnBegin();
                        },
                        success: function (response) {
                            RefreshAfterSuccess(response);
                            OnSuccessMsgBox();

                        },
                        error: function (jqXhr, textStatus, errorThrown) {
                            OnFailure(jqXhr, textStatus, errorThrown)
                        },
                        complete: function () {
                            OnComplete()
                        }
                    });
                }

                break;
            case 'btnMenuViewJe':
                if (pcViewJe.cpId == null) {
                    pcViewJe.Show();
                } else {
                    if (pcViewJe.cpId != Id.GetValue()) {
                        pcViewJe.SetContentHtml("");
                        pcViewJe.PerformCallback();
                        pcViewJe.Show();
                    } else {
                        pcViewJe.Show();
                    }
                }

                break;

            default:

                break;
        }
    }



    function OnClickChoose(s, e, key) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("DetailPartial", "PaymentIn")',
            data: { Id: key },
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {


                RefreshAfterSuccess(response);
                OnSuccess();
                popupList.Hide();

            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()
            }
        });
    }




</script>



<script type="text/javascript">

    function BtnCflVendorPopupListOnClick(s, e) {
        cflBpPopupListVendor.Show();
    }

    function BtnCflContactPersonPopupListOnClick(s, e) {
        cflContactPersonPopupListPaymentIn.Show();
    }


    function BtnCflCustomerPopupListOnClick(s, e) {
        cflBpPopupListCustomer.Show();
    }


    function RefreshCategory() {
        var tab = ASPxClientTabControl.Cast("TabDetail");

        var TabAccount = tab.GetTab(0);
        var TabArCorporate = tab.GetTab(1);
        var TabAp = tab.GetTab(2);

        var tabPayment = ASPxClientTabControl.Cast("TabPayment");
        var TabCash = tabPayment.GetTab(0);
        var TabCreditCard = tabPayment.GetTab(1);
        var TabBankTransfer = tabPayment.GetTab(2);
        var TabCheck = tabPayment.GetTab(3);

        var grpVendorCode = formLayout.GetItemByName('grpVendorCode');
        var grpVendorName = formLayout.GetItemByName('grpVendorName');
        var grpVendorAddress = formLayout.GetItemByName('grpVendorAddress');

        var grpCustomerCode = formLayout.GetItemByName('grpCustomerCode');
        var grpCustomerName = formLayout.GetItemByName('grpCustomerName');
        var grpCustomerAddress = formLayout.GetItemByName('grpCustomerAddress');
        var grpReferenceType = formLayout.GetItemByName('grpReferenceType');

        $('input[name="ReferenceType"]').each(function () {
            $(this).rules('remove', 'required');
        });

        //var grpIsIncludeMdr = formLayout.GetItemByName('grpIsIncludeMdr');

        var grpAmountDetailLc = formLayout.GetItemByName('grpAmountDetailLc');
        var grpAmountTc = formLayout.GetItemByName('grpAmountTc');
        var grpPaymentAmountTc = formLayout.GetItemByName('grpPaymentAmountTc');
        var grpSurchargeTc = formLayout.GetItemByName('grpSurchargeTc');
        var grpBankChargeTc = formLayout.GetItemByName('grpBankChargeTc');
        var grpRoundingTc = formLayout.GetItemByName('grpRoundingTc');
        var grpBalanceTc = formLayout.GetItemByName('grpBalanceTc');


        var grpKasbonTc = formLayout.GetItemByName('grpKasbonTc');

        TabAccount.SetVisible(false);
        TabArCorporate.SetVisible(false);
        TabAp.SetVisible(false);

        grpVendorCode.SetVisible(false);
        grpVendorName.SetVisible(false);
        grpVendorAddress.SetVisible(false);

        grpCustomerCode.SetVisible(false);
        grpCustomerName.SetVisible(false);
        grpCustomerAddress.SetVisible(false);
        grpReferenceType.SetVisible(false);
        //grpIsIncludeMdr.SetVisible(false);

        grpAmountDetailLc.SetVisible(false);


        if (Category.GetValue() == 'Account') {
            TabAccount.SetVisible(true);

            //grpCustomerName.SetVisible(true);
            //grpCustomerAddress.SetVisible(true);


            tab.SetActiveTabIndex(0);
        } else if (Category.GetValue() == 'Customer') {
            TabArCorporate.SetVisible(true);

            grpCustomerCode.SetVisible(true);
            grpCustomerName.SetVisible(true);
            grpCustomerAddress.SetVisible(true);
            //grpIsIncludeMdr.SetVisible(true);

            grpAmountDetailLc.SetVisible(true);

            tab.SetActiveTabIndex(1);
        }else if (Category.GetValue() == 'Vendor') {
            TabAp.SetVisible(true);

            grpVendorCode.SetVisible(true);
            grpVendorName.SetVisible(true);
            grpVendorAddress.SetVisible(true);

            grpAmountDetailLc.SetVisible(true);

            tab.SetActiveTabIndex(2);
        }


        if (Status.GetValue() == 'Draft') {
            AmountTc.GetInputElement().readOnly = true;
            AmountTc.GetMainElement().style.backgroundColor = "Lavender";
            AmountTc.GetInputElement().style.backgroundColor = "Lavender";

            if (
                    (Category.GetValue() == 'Customer')
            )
            {
                //grpCustomerCode.SetVisible(true);
                CustomerName.GetInputElement().readOnly = true;
                CustomerName.GetMainElement().style.backgroundColor = "Lavender";
                CustomerName.GetInputElement().style.backgroundColor = "Lavender";

            }
            else {
                //grpCustomerCode.SetVisible(false);

                CustomerName.GetInputElement().readOnly = false;
                CustomerName.GetMainElement().style.backgroundColor = "White";
                CustomerName.GetInputElement().style.backgroundColor = "White";


            }

        }

        if (Status.GetValue() != 'Draft') {
            if ((PaymentCode.GetValue() == null) || (PaymentCode.GetValue() == '')) {
                TabCash.SetVisible(false);
                TabCreditCard.SetVisible(false);
                TabBankTransfer.SetVisible(false);
                TabCheck.SetVisible(false);

            } else {
                if ((PaymentCode.GetValue().indexOf("Cash") != -1) && (CashAmountTc.GetValue() != null) && (CashAmountTc.GetValue() != 0)) {
                    TabCash.SetVisible(true);
                } else {
                    TabCash.SetVisible(false);
                }
                if (PaymentCode.GetValue().indexOf("Credit Card") != -1) {
                    TabCreditCard.SetVisible(true);
                } else {
                    TabCreditCard.SetVisible(false);
                }
                if (PaymentCode.GetValue().indexOf("Transfer") != -1) {
                    TabBankTransfer.SetVisible(true);
                } else {
                    TabBankTransfer.SetVisible(false);
                }
                if (PaymentCode.GetValue().indexOf("Cheque") != -1) {
                    TabCheck.SetVisible(true);
                } else {
                    TabCheck.SetVisible(false);
                }
            }
        }

    }


    function CategoryOnValueChanged(s, e) {
        RefreshCategory();


        if (Category.GetValue() == 'Account') {
            AmountTc.SetValue(gvPaymentInAccountDetailLabelAmountTcSum.cpValue);
        } else if (Category.GetValue() == 'Customer') {
            AmountDetailTc.SetValue(gvPaymentInArCorporateDetailLabelPaymentAmountTcSum.cpValue);
            AmountDetailLc.SetValue(gvPaymentInArCorporateDetailLabelPaymentAmountLcSum.cpValue);
        } else if (Category.GetValue() == 'Vendor') {
            AmountDetailTc.SetValue(gvPaymentInApDetailLabelPaymentAmountTcSum.cpValue);
            AmountDetailLc.SetValue(gvPaymentInApDetailLabelPaymentAmountLcSum.cpValue);
        }

        refreshPayment();
    }


    function rbCostCenter4OnValueChanged(s, e) {
        var grpReferenceType = formLayout.GetItemByName('grpReferenceType');

        $('input[name="ReferenceType"]').each(function () {
            $(this).rules('remove', 'required');
        });
        $("#ReferenceType_Mandatory").text('');
        ReferenceType.SetValue(null);
        grpReferenceType.SetVisible(false);

        var grpBranchCode = formLayout.GetItemByName('grpBranchCode');

        $('input[name="BranchCode"]').each(function () {
            $(this).rules('remove', 'required');
        });
        $("#BranchCode_Mandatory").text('');
        BranchCode.SetValue(null);
        grpBranchCode.SetVisible(false);


        if (rbCostCenter4.GetValue() == "REG") {
            CostCenter4.SetValue("REG");
            CostCenter4.SetVisible(false);


        } else {
            CostCenter4.SetValue(null);
            CostCenter4.SetVisible(true);
            if (Category.GetValue() == 'DpTopUpRetail' || Category.GetValue() == 'DpTopUpCorporate') {
                grpReferenceType.SetVisible(true);
                $("#ReferenceType_Mandatory").text('*');

                $('input[name="ReferenceType"]').each(function () {
                    $(this).rules('add', { required: true, messages: { required: 'required' } });
                });


                grpBranchCode.SetVisible(true);
                $("#BranchCode_Mandatory").text('*');

                $('input[name="BranchCode"]').each(function () {
                    $(this).rules('add', { required: true, messages: { required: 'required' } });
                });
            }

        }
    }

    function CostCenter4OnValueChanged(s, e) {
        var grpReferenceType = formLayout.GetItemByName('grpReferenceType');
        $('input[name="ReferenceType"]').each(function () {
            $(this).rules('remove', 'required');
        });
        $("#ReferenceType_Mandatory").text('');
        ReferenceType.SetValue(null);
        grpReferenceType.SetVisible(false);


        var grpBranchCode = formLayout.GetItemByName('grpBranchCode');
        $('input[name="BranchCode"]').each(function () {
            $(this).rules('remove', 'required');
        });
        $("#BranchCode_Mandatory").text('');
        BranchCode.SetValue(null);
        grpBranchCode.SetVisible(false);

        if (CostCenter4.GetValue() == "REG") {
            rbCostCenter4.SetValue("REG");
            CostCenter4.SetVisible(false);
        } else {
            if (Category.GetValue() == 'DpTopUpRetail' || Category.GetValue() == 'DpTopUpCorporate') {
                grpReferenceType.SetVisible(true);
                $("#ReferenceType_Mandatory").text('*');

                $('input[name="ReferenceType"]').each(function () {
                    $(this).rules('add', { required: true, messages: { required: 'required' } });
                });

                grpBranchCode.SetVisible(true);
                $("#BranchCode_Mandatory").text('*');

                $('input[name="BranchCode"]').each(function () {
                    $(this).rules('add', { required: true, messages: { required: 'required' } });
                });
            }
        }
    }



    function TransDateOnValueChanged(s, e) {
        RefreshRate();
    }

    function CurCodeOnValueChanged(s, e) {
        RefreshRate();
    }

    function RefreshRate() {
        var urlRate = '@Url.Action("GetCurRate", "_GetData")';
        GetRateCurr(urlRate, CurCode.GetValue(), TransDate.GetDate().ToIduyyyymmdd(), 'RefreshRate_Func');
    }

    function RefreshRate_Func(curRate) {
        CurRate.SetValue(curRate);
        refreshPayment();
    }



    function BtnCflCoaCheckPopupListOnClick(s, e) {
        cflCoaPopupListCheck.Show();
    }

    function BtnCflBankCheckPopupListOnClick(s, e) {

        var popupBankCc = ASPxClientPopupControl.Cast("cflBankCheckPopupListBankCode");

        var gv = ASPxClientGridView.Cast('gvCflBankCheckListBankCode');
        if (gv == null) {
            popupBankCc.Show();
        } else {
            popupBankCc.SetContentHtml("");
            popupBankCc.PerformCallback();
            popupBankCc.Show();
        }


    }

     function BtnCflCreditCardPopupListOnClick(s, e) {

        var popupCcCreditCard = ASPxClientPopupControl.Cast("cflCreditCardPopupListPaymentIn");

        var gv = ASPxClientGridView.Cast('gvCflCreditCardListPaymentIn');
        if (gv == null) {
            popupCcCreditCard.Show();
        } else {
            popupCcCreditCard.SetContentHtml("");
            popupCcCreditCard.PerformCallback();
            popupCcCreditCard.Show();
        }


    }

     function BtnCflCcCoaCodePopupListOnClick(s, e) {
        var popupCcCoaCode = ASPxClientPopupControl.Cast("cflCoaPopupListCreditCard");

        //var gv = ASPxClientGridView.Cast('gvCflCoaCodePopupListCreditCard');
        //if (gv == null) {
            popupCcCoaCode.Show();
        //} else {
        //    popupCcCoaCode.SetContentHtml("");
        //    popupCcCoaCode.PerformCallback();
        //    popupCcCoaCode.Show();
        //}
    }


    function BtnCflCoaCashBackPopupListOnClick(s, e) {
        cflCoaPopupListCashBack.Show();
    }



</script>

<script type="text/javascript">
    function refreshPayment() {
        if (Category.GetValue() == 'Customer' || Category.GetValue() == 'Vendor') {
            var amountTc = AmountDetailLc.GetValue() / CurRate.GetValue();
            amountTc = amountTc.toFixed(2);
            AmountTc.SetValue(amountTc);
        } else {

        }

        var paymentAmountTc = CashAmountTc.GetValue() + TransferAmountTc.GetValue() + parseFloat(gvPaymentInCheckDetailLabelAmountTcSum.cpValue) + parseFloat(gvPaymentInCcDetailLabelAmountTcSum.cpValue);
        PaymentAmountTc.SetValue(parseFloat(paymentAmountTc).toFixed(2));

        var balancetc = PaymentAmountTc.GetValue() - AmountTc.GetValue() - BankChargeTc.GetValue() - RoundingTc.GetValue();
        BalanceTc.SetValue(balancetc.toFixed(2));
    }

    function CashAmountTcOnValueChanged(s, e) {
        //clear coa
        var val = s.GetValue();
        if (val == 0 || val == null) {
            var CashCoaCode = ASPxClientTextBox.Cast("CashCoaCode");
            CashCoaCode.SetValue(null);
            var CashCoaName = ASPxClientTextBox.Cast("CashCoaName");
            CashCoaName.SetValue(null);
        }
        refreshPayment();
    }

    function TransferAmountTcOnValueChanged(s, e) {
        //clear coa
        var val = s.GetValue();
        if (val == 0 || val == null) {
            var TransferCoaCode = ASPxClientTextBox.Cast("TransferCoaCode");
            TransferCoaCode.SetValue(null);
            var TransferCoaName = ASPxClientTextBox.Cast("TransferCoaName");
            TransferCoaName.SetValue(null);
        }
        refreshPayment();
    }

    function CashBackAmountTcOnValueChanged(s, e) {
        refreshPayment();
    }


    function AmountTcOnValueChanged(s, e) {
        refreshPayment();
    }


    function BankChargeTcOnValueChanged(s, e) {
        refreshPayment();
    }

    function RoundingTcOnValueChanged(s, e) {
        refreshPayment();
    }


</script>

@*
    ------------------------------------------------------------------------------
    Cc
    -------------------------------------------------------------------------------
*@

<script type="text/javascript">


    function gvPaymentInCcDetailOnCustomButtonClick(s, e) {
        if (e.buttonID == "deleteButton") {

            s.batchEditApi.StartEdit(e.visibleIndex);
            var rowValues = s.batchEditHelper.GetRowValues(e.visibleIndex);
            gvPaymentInCcCalculateSummary(s, rowValues, e.visibleIndex, true);
            s.DeleteRow(e.visibleIndex);
            s.GetBatchEditHelper().CanUpdate();

        }
    }

    function gvPaymentInCcCalculateSummary(grid, rowValues, visibleIndex, isDeleting) {
        //AmountTc
        var originalValue_AmountTc = grid.batchEditApi.GetCellValue(visibleIndex, "AmountTc");

        var newValue_AmountTc = rowValues[(grid.GetColumnByField("AmountTc").index)].value;
        var dif_AmountTc = isDeleting ? -newValue_AmountTc : newValue_AmountTc - originalValue_AmountTc;

        gvPaymentInCcDetailLabelAmountTcSum.cpValue = (parseFloat(gvPaymentInCcDetailLabelAmountTcSum.cpValue) + dif_AmountTc).toFixed(2);
        gvPaymentInCcDetailLabelAmountTcSum.SetValue(gvPaymentInCcDetailLabelAmountTcSum.cpValue.replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));


        refreshPayment();
    }

    //function gvPaymentInCcDetailOnBatchEditStartEditing(s, e) {
    //    //var CcNoColumn = s.GetColumnByField("CcNo_");
    //    //if (e.rowValues.hasOwnProperty(CcNoColumn.index)) {
    //    //    var cellInfoCcNo = e.rowValues[CcNoColumn.index];
    //    //    gvPaymentInCcDetail_CcNo.SetValue(cellInfoCcNo.value);
    //    //}

    //    //if (e.focusedColumn === CcNoColumn) {
    //    //    gvPaymentInCcDetail_CcNo.SetFocus();
    //    //}
    //}

    function gvPaymentInCcDetailOnBatchEditStartEditing(s, e) {
        //var CoaNameColumn = s.GetColumnByField("CoaName");
        //if (e.rowValues.hasOwnProperty(CoaNameColumn.index)) {
        //    var cellInfoCoaName = e.rowValues[CoaNameColumn.index];
        //    gvPaymentInAccountDetail_CoaName.SetValue(cellInfoCoaName.value);
        //}

        //if (e.focusedColumn === CoaNameColumn) {
        //    gvPaymentInAccountDetail_CoaName.SetFocus();
        //}

        var CreditCardNameColumn = s.GetColumnByField("CreditCardName");
        if (e.rowValues.hasOwnProperty(CreditCardNameColumn.index)) {
            var cellInfoCreditCardName = e.rowValues[CreditCardNameColumn.index];
            gvPaymentInCcDetail_CreditCardName.SetValue(cellInfoCreditCardName.value);
        }

        if (e.focusedColumn === CreditCardNameColumn) {
            gvPaymentInCcDetail_CreditCardName.SetFocus();
        }
    }

    function gvPaymentInCcDetailOnBatchEditEndEditing(s, e) {
        var CreditCardNameColumn = s.GetColumnByField("CreditCardName");
        if (e.rowValues.hasOwnProperty(CreditCardNameColumn.index)) {
            var cellInfoCreditCardName = e.rowValues[CreditCardNameColumn.index];
            cellInfoCreditCardName.value = gvPaymentInCcDetail_CreditCardName.GetValue();
            cellInfoCreditCardName.text = gvPaymentInCcDetail_CreditCardName.GetText();
            gvPaymentInCcDetail_CreditCardName.SetValue(null);
        }

        gvPaymentInCcCalculateSummary(s, e.rowValues, e.visibleIndex, false);
    }

    //function gvPaymentInCcDetailOnBatchEditEndEditing(s, e) {
    //    //var CcNoColumn = s.GetColumnByField("CcNo_");
    //    //if (e.rowValues.hasOwnProperty(CcNoColumn.index)) {
    //    //    var cellInfoCcNo = e.rowValues[CcNoColumn.index];
    //    //    cellInfoCcNo.value = gvPaymentInCcDetail_CcNo.GetValue();
    //    //    cellInfoCcNo.text = gvPaymentInCcDetail_CcNo.GetText();
    //    //    gvPaymentInCcDetail_CcNo.SetValue(null);
    //    //}

    //    gvPaymentInCcCalculateSummary(s, e.rowValues, e.visibleIndex, false);
    //}


    function gvPaymentInCcDetailOnBatchEditRowValidating(s, e) {
        //CreditCardId
        var CreditCardIdColumn = s.GetColumnByField("CreditCardId");
        var cellValidationInfoCreditCardId = e.validationInfo[CreditCardIdColumn.index];
        if (!cellValidationInfoCreditCardId) return;
        var valueCreditCardId = cellValidationInfoCreditCardId.value;
        if (!ASPxClientUtils.IsExists(valueCreditCardId) || ASPxClientUtils.Trim(valueCreditCardId) === "") {
            cellValidationInfoCreditCardId.isValid = false;
            cellValidationInfoCreditCardId.errorText = "required";
        }

        //CcNo_
        var CcNo_Column = s.GetColumnByField("CcNo_");
        var cellValidationInfoCcNo_ = e.validationInfo[CcNo_Column.index];
        if (!cellValidationInfoCcNo_) return;
        var valueCcNo_ = cellValidationInfoCcNo_.value;
        if (!ASPxClientUtils.IsExists(valueCcNo_) || ASPxClientUtils.Trim(valueCcNo_) === "") {
            cellValidationInfoCcNo_.isValid = false;
            cellValidationInfoCcNo_.errorText = "required";
        }


        //ValidUntilDate
        var ValidUntilDateColumn = s.GetColumnByField("ValidUntilDate");
        var cellValidationInfoValidUntilDate = e.validationInfo[ValidUntilDateColumn.index];
        if (!cellValidationInfoValidUntilDate) return;
        var valueValidUntilDate = cellValidationInfoValidUntilDate.value;
        if (!ASPxClientUtils.IsExists(valueValidUntilDate) || ASPxClientUtils.Trim(valueValidUntilDate) === "") {
            cellValidationInfoValidUntilDate.isValid = false;
            cellValidationInfoValidUntilDate.errorText = "required";
        }

        //AmountTc
        var AmountTcColumn = s.GetColumnByField("AmountTc");
        var cellValidationInfoAmountTc = e.validationInfo[AmountTcColumn.index];
        if (!cellValidationInfoAmountTc) return;
        var valueAmountTc = cellValidationInfoAmountTc.value;
        if (!ASPxClientUtils.IsExists(valueAmountTc) || ASPxClientUtils.Trim(valueAmountTc) === "") {
            cellValidationInfoAmountTc.isValid = false;
            cellValidationInfoAmountTc.errorText = "required";
        }



    }

</script>


@*
    ------------------------------------------------------------------------------
    Check
    -------------------------------------------------------------------------------
*@

<script type="text/javascript">


    function gvPaymentInCheckDetailOnCustomButtonClick(s, e) {
        if (e.buttonID == "deleteButton") {

            s.batchEditApi.StartEdit(e.visibleIndex);
            var rowValues = s.batchEditHelper.GetRowValues(e.visibleIndex);
            gvPaymentInCheckCalculateSummary(s, rowValues, e.visibleIndex, true);
            s.DeleteRow(e.visibleIndex);
            s.GetBatchEditHelper().CanUpdate();

        }
    }

    function gvPaymentInCheckCalculateSummary(grid, rowValues, visibleIndex, isDeleting) {
        //AmountTc
        var originalValue_AmountTc = grid.batchEditApi.GetCellValue(visibleIndex, "AmountTc");

        var newValue_AmountTc = rowValues[(grid.GetColumnByField("AmountTc").index)].value;
        var dif_AmountTc = isDeleting ? -newValue_AmountTc : newValue_AmountTc - originalValue_AmountTc;

        gvPaymentInCheckDetailLabelAmountTcSum.cpValue = (parseFloat(gvPaymentInCheckDetailLabelAmountTcSum.cpValue) + dif_AmountTc).toFixed(2);
        gvPaymentInCheckDetailLabelAmountTcSum.SetValue(gvPaymentInCheckDetailLabelAmountTcSum.cpValue.replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));

        refreshPayment();
    }

    function gvPaymentInCheckDetailOnBatchEditStartEditing(s, e) {



        var BankCodeColumn = s.GetColumnByField("BankCode");
        if (e.rowValues.hasOwnProperty(BankCodeColumn.index)) {
            var cellInfoBankCode = e.rowValues[BankCodeColumn.index];
            gvPaymentInCheckDetail_BankCode.SetValue(cellInfoBankCode.value);
        }

        if (e.focusedColumn === BankCodeColumn) {
            gvPaymentInCheckDetail_BankCode.SetFocus();
        }
    }
    function gvPaymentInCheckDetailOnBatchEditEndEditing(s, e) {


        var BankCodeColumn = s.GetColumnByField("BankCode");
        if (e.rowValues.hasOwnProperty(BankCodeColumn.index)) {
            var cellInfoBankCode = e.rowValues[BankCodeColumn.index];
            cellInfoBankCode.value = gvPaymentInCheckDetail_BankCode.GetValue();
            cellInfoBankCode.text = gvPaymentInCheckDetail_BankCode.GetText();
            gvPaymentInCheckDetail_BankCode.SetValue(null);
        }



        gvPaymentInCheckCalculateSummary(s, e.rowValues, e.visibleIndex, false);
    }


    function gvPaymentInCheckDetailOnBatchEditRowValidating(s, e) {
        //DueDate
        var DueDateColumn = s.GetColumnByField("DueDate");
        var cellValidationInfoDueDate = e.validationInfo[DueDateColumn.index];
        if (!cellValidationInfoDueDate) return;
        var valueDueDate = cellValidationInfoDueDate.value;
        if (!ASPxClientUtils.IsExists(valueDueDate) || ASPxClientUtils.Trim(valueDueDate) === "") {
            cellValidationInfoDueDate.isValid = false;
            cellValidationInfoDueDate.errorText = "required";
        }


        //AmountTc
        var AmountTcColumn = s.GetColumnByField("AmountTc");
        var cellValidationInfoAmountTc = e.validationInfo[AmountTcColumn.index];
        if (!cellValidationInfoAmountTc) return;
        var valueAmountTc = cellValidationInfoAmountTc.value;
        if (!ASPxClientUtils.IsExists(valueAmountTc) || ASPxClientUtils.Trim(valueAmountTc) === "") {
            cellValidationInfoAmountTc.isValid = false;
            cellValidationInfoAmountTc.errorText = "required";
        }

        //CheckNo
        var CheckNoColumn = s.GetColumnByField("CheckNo");
        var cellValidationInfoCheckNo = e.validationInfo[CheckNoColumn.index];
        if (!cellValidationInfoCheckNo) return;
        var valueCheckNo = cellValidationInfoCheckNo.value;
        if (!ASPxClientUtils.IsExists(valueCheckNo) || ASPxClientUtils.Trim(valueCheckNo) === "") {
            cellValidationInfoCheckNo.isValid = false;
            cellValidationInfoCheckNo.errorText = "required";
        }


        //CountryCode
        var CountryCodeColumn = s.GetColumnByField("CountryCode");
        var cellValidationInfoCountryCode = e.validationInfo[CountryCodeColumn.index];
        if (!cellValidationInfoCountryCode) return;
        var valueCountryCode = cellValidationInfoCountryCode.value;
        if (!ASPxClientUtils.IsExists(valueCountryCode) || ASPxClientUtils.Trim(valueCountryCode) === "") {
            cellValidationInfoCountryCode.isValid = false;
            cellValidationInfoCountryCode.errorText = "required";
        }

        //BankCode
        var BankCodeColumn = s.GetColumnByField("BankCode");
        var cellValidationInfoBankCode = e.validationInfo[BankCodeColumn.index];
        if (!cellValidationInfoBankCode) return;
        var valueBankCode = cellValidationInfoBankCode.value;
        if (!ASPxClientUtils.IsExists(valueBankCode) || ASPxClientUtils.Trim(valueBankCode) === "") {
            cellValidationInfoBankCode.isValid = false;
            cellValidationInfoBankCode.errorText = "required";
        }





    }

</script>



@*
    ------------------------------------------------------------------------------
    Deposit
    -------------------------------------------------------------------------------
*@

<script type="text/javascript">


    function gvPaymentInDepositDetailOnCustomButtonClick(s, e) {
        if (e.buttonID == "deleteButton") {

            s.batchEditApi.StartEdit(e.visibleIndex);
            var rowValues = s.batchEditHelper.GetRowValues(e.visibleIndex);
            gvPaymentInDepositCalculateSummary(s, rowValues, e.visibleIndex, true);
            s.DeleteRow(e.visibleIndex);
            s.GetBatchEditHelper().CanUpdate();

        }
    }

    function gvPaymentInDepositCalculateSummary(grid, rowValues, visibleIndex, isDeleting) {
        //PaymentAmountTc
        var originalValue_PaymentAmountTc = grid.batchEditApi.GetCellValue(visibleIndex, "PaymentAmountTc");

        var newValue_PaymentAmountTc = rowValues[(grid.GetColumnByField("PaymentAmountTc").index)].value;
        var dif_PaymentAmountTc = isDeleting ? -newValue_PaymentAmountTc : newValue_PaymentAmountTc - originalValue_PaymentAmountTc;

        gvPaymentInDepositDetailLabelPaymentAmountTcSum.cpValue = (parseFloat(gvPaymentInDepositDetailLabelPaymentAmountTcSum.cpValue) + dif_PaymentAmountTc).toFixed(2);
        gvPaymentInDepositDetailLabelPaymentAmountTcSum.SetValue(gvPaymentInDepositDetailLabelPaymentAmountTcSum.cpValue.replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));

        refreshPayment();
    }

    function gvPaymentInDepositDetailOnBatchEditStartEditing(s, e) {

    }
    function gvPaymentInDepositDetailOnBatchEditEndEditing(s, e) {


        gvPaymentInDepositCalculateSummary(s, e.rowValues, e.visibleIndex, false);
    }


    function gvPaymentInDepositDetailOnBatchEditRowValidating(s, e) {

        //PaymentAmountTc
        var PaymentAmountTcColumn = s.GetColumnByField("PaymentAmountTc");
        var cellValidationInfoPaymentAmountTc = e.validationInfo[PaymentAmountTcColumn.index];
        if (!cellValidationInfoPaymentAmountTc) return;
        var valuePaymentAmountTc = cellValidationInfoPaymentAmountTc.value;
        if (!ASPxClientUtils.IsExists(valuePaymentAmountTc) || ASPxClientUtils.Trim(valuePaymentAmountTc) === "") {
            cellValidationInfoPaymentAmountTc.isValid = false;
            cellValidationInfoPaymentAmountTc.errorText = "required";
        }


    }

</script>




@*
    ------------------------------------------------------------------------------
    Voucher
    -------------------------------------------------------------------------------
*@

<script type="text/javascript">


    function gvPaymentInVoucherDetailOnCustomButtonClick(s, e) {
        if (e.buttonID == "deleteButton") {

            s.batchEditApi.StartEdit(e.visibleIndex);
            var rowValues = s.batchEditHelper.GetRowValues(e.visibleIndex);
            gvPaymentInVoucherCalculateSummary(s, rowValues, e.visibleIndex, true);
            s.DeleteRow(e.visibleIndex);
            s.GetBatchEditHelper().CanUpdate();

        }
    }

    function gvPaymentInVoucherCalculateSummary(grid, rowValues, visibleIndex, isDeleting) {
        //PaymentAmountTc
        var originalValue_PaymentAmountTc = grid.batchEditApi.GetCellValue(visibleIndex, "PaymentAmountTc");

        var newValue_PaymentAmountTc = rowValues[(grid.GetColumnByField("PaymentAmountTc").index)].value;
        var dif_PaymentAmountTc = isDeleting ? -newValue_PaymentAmountTc : newValue_PaymentAmountTc - originalValue_PaymentAmountTc;

        gvPaymentInVoucherDetailLabelPaymentAmountTcSum.cpValue = (parseFloat(gvPaymentInVoucherDetailLabelPaymentAmountTcSum.cpValue) + dif_PaymentAmountTc).toFixed(2);
        gvPaymentInVoucherDetailLabelPaymentAmountTcSum.SetValue(gvPaymentInVoucherDetailLabelPaymentAmountTcSum.cpValue.replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));

        refreshPayment();
    }

    function gvPaymentInVoucherDetailOnBatchEditStartEditing(s, e) {

    }
    function gvPaymentInVoucherDetailOnBatchEditEndEditing(s, e) {


        gvPaymentInVoucherCalculateSummary(s, e.rowValues, e.visibleIndex, false);
    }


    function gvPaymentInVoucherDetailOnBatchEditRowValidating(s, e) {

        //PaymentAmountTc
        var PaymentAmountTcColumn = s.GetColumnByField("PaymentAmountTc");
        var cellValidationInfoPaymentAmountTc = e.validationInfo[PaymentAmountTcColumn.index];
        if (!cellValidationInfoPaymentAmountTc) return;
        var valuePaymentAmountTc = cellValidationInfoPaymentAmountTc.value;
        if (!ASPxClientUtils.IsExists(valuePaymentAmountTc) || ASPxClientUtils.Trim(valuePaymentAmountTc) === "") {
            cellValidationInfoPaymentAmountTc.isValid = false;
            cellValidationInfoPaymentAmountTc.errorText = "required";
        }


    }

</script>

@*
    ------------------------------------------------------------------------------
    Memo
    -------------------------------------------------------------------------------
*@

<script type="text/javascript">

    function BtnCflMemoCoaNamePopupListOnClick(s, e) {
        cflCoaPopupListMemo.Show();
    }

    function gvPaymentInMemoDetailOnCustomButtonClick(s, e) {
        if (e.buttonID == "deleteButton") {

            s.batchEditApi.StartEdit(e.visibleIndex);
            var rowValues = s.batchEditHelper.GetRowValues(e.visibleIndex);
            gvPaymentInMemoCalculateSummary(s, rowValues, e.visibleIndex, true);
            s.DeleteRow(e.visibleIndex);
            s.GetBatchEditHelper().CanUpdate();

        }
    }

    function gvPaymentInMemoCalculateSummary(grid, rowValues, visibleIndex, isDeleting) {
        //AmountTc
        var originalValue_AmountTc = grid.batchEditApi.GetCellValue(visibleIndex, "AmountTc");

        var newValue_AmountTc = rowValues[(grid.GetColumnByField("AmountTc").index)].value;
        var dif_AmountTc = isDeleting ? -newValue_AmountTc : newValue_AmountTc - originalValue_AmountTc;

        gvPaymentInMemoDetailLabelAmountTcSum.cpValue = (parseFloat(gvPaymentInMemoDetailLabelAmountTcSum.cpValue) + dif_AmountTc).toFixed(2);
        gvPaymentInMemoDetailLabelAmountTcSum.SetValue(gvPaymentInMemoDetailLabelAmountTcSum.cpValue.replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));



        refreshPayment();
    }

    function gvPaymentInMemoDetailOnBatchEditStartEditing(s, e) {
        var CoaNameColumn = s.GetColumnByField("CoaName");
        if (e.rowValues.hasOwnProperty(CoaNameColumn.index)) {
            var cellInfoCoaName = e.rowValues[CoaNameColumn.index];
            gvPaymentInMemoDetail_CoaName.SetValue(cellInfoCoaName.value);
        }

        if (e.focusedColumn === CoaNameColumn) {
            gvPaymentInMemoDetail_CoaName.SetFocus();
        }
    }
    function gvPaymentInMemoDetailOnBatchEditEndEditing(s, e) {
        var CoaNameColumn = s.GetColumnByField("CoaName");
        if (e.rowValues.hasOwnProperty(CoaNameColumn.index)) {
            var cellInfoCoaName = e.rowValues[CoaNameColumn.index];
            cellInfoCoaName.value = gvPaymentInMemoDetail_CoaName.GetValue();
            cellInfoCoaName.text = gvPaymentInMemoDetail_CoaName.GetText();
            gvPaymentInMemoDetail_CoaName.SetValue(null);
        }

        gvPaymentInMemoCalculateSummary(s, e.rowValues, e.visibleIndex, false);
    }


    function gvPaymentInMemoDetailOnBatchEditRowValidating(s, e) {
        //CoaName
        var CoaNameColumn = s.GetColumnByField("CoaName");
        var cellValidationInfoCoaName = e.validationInfo[CoaNameColumn.index];
        if (!cellValidationInfoCoaName) return;
        var valueCoaName = cellValidationInfoCoaName.value;
        if (!ASPxClientUtils.IsExists(valueCoaName) || ASPxClientUtils.Trim(valueCoaName) === "") {
            cellValidationInfoCoaName.isValid = false;
            cellValidationInfoCoaName.errorText = "required";
        }

        //AmountTc
        var AmountTcColumn = s.GetColumnByField("AmountTc");
        var cellValidationInfoAmountTc = e.validationInfo[AmountTcColumn.index];
        if (!cellValidationInfoAmountTc) return;
        var valueAmountTc = cellValidationInfoAmountTc.value;
        if (!ASPxClientUtils.IsExists(valueAmountTc) || ASPxClientUtils.Trim(valueAmountTc) === "") {
            cellValidationInfoAmountTc.isValid = false;
            cellValidationInfoAmountTc.errorText = "required";
        }

    }

</script>


@*
    ------------------------------------------------------------------------------
    General
    -------------------------------------------------------------------------------
*@

<script type="text/javascript">

    function BtnCflAccountCoaNamePopupListOnClick(s, e) {
        cflCoaPopupListAccount.Show();
    }

    function gvPaymentInAccountDetailOnCustomButtonClick(s, e) {
        if (e.buttonID == "deleteButton") {

            s.batchEditApi.StartEdit(e.visibleIndex);
            var rowValues = s.batchEditHelper.GetRowValues(e.visibleIndex);
            gvPaymentInAccountCalculateSummary(s, rowValues, e.visibleIndex, true);
            s.DeleteRow(e.visibleIndex);
            s.GetBatchEditHelper().CanUpdate();

        }
    }

    function gvPaymentInAccountCalculateSummary(grid, rowValues, visibleIndex, isDeleting) {
        //AmountTc
        var originalValue_AmountTc = grid.batchEditApi.GetCellValue(visibleIndex, "AmountTc");

        var newValue_AmountTc = rowValues[(grid.GetColumnByField("AmountTc").index)].value;
        var dif_AmountTc = isDeleting ? -newValue_AmountTc : newValue_AmountTc - originalValue_AmountTc;

        gvPaymentInAccountDetailLabelAmountTcSum.cpValue = (parseFloat(gvPaymentInAccountDetailLabelAmountTcSum.cpValue) + dif_AmountTc).toFixed(2);
        gvPaymentInAccountDetailLabelAmountTcSum.SetValue(gvPaymentInAccountDetailLabelAmountTcSum.cpValue.replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));

        AmountTc.SetValue(gvPaymentInAccountDetailLabelAmountTcSum.cpValue);

        refreshPayment();
    }

    function gvPaymentInAccountDetailOnBatchEditStartEditing(s, e) {
        var CoaNameColumn = s.GetColumnByField("CoaName");
        if (e.rowValues.hasOwnProperty(CoaNameColumn.index)) {
            var cellInfoCoaName = e.rowValues[CoaNameColumn.index];
            gvPaymentInAccountDetail_CoaName.SetValue(cellInfoCoaName.value);
        }

        if (e.focusedColumn === CoaNameColumn) {
            gvPaymentInAccountDetail_CoaName.SetFocus();
        }
    }
    function gvPaymentInAccountDetailOnBatchEditEndEditing(s, e) {
        var CoaNameColumn = s.GetColumnByField("CoaName");
        if (e.rowValues.hasOwnProperty(CoaNameColumn.index)) {
            var cellInfoCoaName = e.rowValues[CoaNameColumn.index];
            cellInfoCoaName.value = gvPaymentInAccountDetail_CoaName.GetValue();
            cellInfoCoaName.text = gvPaymentInAccountDetail_CoaName.GetText();
            gvPaymentInAccountDetail_CoaName.SetValue(null);
        }

        gvPaymentInAccountCalculateSummary(s, e.rowValues, e.visibleIndex, false);
    }


    function gvPaymentInAccountDetailOnBatchEditRowValidating(s, e) {
        //CoaName
        var CoaNameColumn = s.GetColumnByField("CoaName");
        var cellValidationInfoCoaName = e.validationInfo[CoaNameColumn.index];
        if (!cellValidationInfoCoaName) return;
        var valueCoaName = cellValidationInfoCoaName.value;
        if (!ASPxClientUtils.IsExists(valueCoaName) || ASPxClientUtils.Trim(valueCoaName) === "") {
            cellValidationInfoCoaName.isValid = false;
            cellValidationInfoCoaName.errorText = "required";
        }

        //AmountTc
        var AmountTcColumn = s.GetColumnByField("AmountTc");
        var cellValidationInfoAmountTc = e.validationInfo[AmountTcColumn.index];
        if (!cellValidationInfoAmountTc) return;
        var valueAmountTc = cellValidationInfoAmountTc.value;
        if (!ASPxClientUtils.IsExists(valueAmountTc) || ASPxClientUtils.Trim(valueAmountTc) === "") {
            cellValidationInfoAmountTc.isValid = false;
            cellValidationInfoAmountTc.errorText = "required";
        }

    }

</script>



@*
    ------------------------------------------------------------------------------
    Ap
    -------------------------------------------------------------------------------
*@

<script type="text/javascript">

    function gvPaymentInApDetailPaymentAmountTcOnValueChanged(s, e) {
        var grdView = ASPxClientGridView.Cast("gvPaymentInApDetail");
        var temp1 = grdView.GetEditValue('PaymentAmountTc') * grdView.GetEditValue('InvoiceCurRate');
        gvPaymentInApDetailPaymentAmountLc.SetValue(temp1);
    }

    function gvPaymentInApDetailOnCustomButtonClick(s, e) {
        if (e.buttonID == "deleteButton") {

            s.batchEditApi.StartEdit(e.visibleIndex);
            var rowValues = s.batchEditHelper.GetRowValues(e.visibleIndex);
            gvPaymentInApDetailCalculateSummary(s, rowValues, e.visibleIndex, true);
            s.DeleteRow(e.visibleIndex);
            s.GetBatchEditHelper().CanUpdate();

        }
    }

    function gvPaymentInApDetailCalculateSummary(grid, rowValues, visibleIndex, isDeleting) {
        //AmountTc
        var originalValue_PaymentAmountTc = grid.batchEditApi.GetCellValue(visibleIndex, "PaymentAmountTc");

        var newValue_PaymentAmountTc = rowValues[(grid.GetColumnByField("PaymentAmountTc").index)].value;
        var dif_PaymentAmountTc = isDeleting ? -newValue_PaymentAmountTc : newValue_PaymentAmountTc - originalValue_PaymentAmountTc;

        gvPaymentInApDetailLabelPaymentAmountTcSum.cpValue = (parseFloat(gvPaymentInApDetailLabelPaymentAmountTcSum.cpValue) + dif_PaymentAmountTc).toFixed(2);
        gvPaymentInApDetailLabelPaymentAmountTcSum.SetValue(gvPaymentInApDetailLabelPaymentAmountTcSum.cpValue.replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));

        AmountDetailTc.SetValue(gvPaymentInApDetailLabelPaymentAmountTcSum.cpValue);

        //PaymentAmountLc
        var originalValue_PaymentAmountLc = grid.batchEditApi.GetCellValue(visibleIndex, "PaymentAmountLc");

        var newValue_PaymentAmountLc = rowValues[(grid.GetColumnByField("PaymentAmountLc").index)].value;
        var dif_PaymentAmountLc = isDeleting ? -newValue_PaymentAmountLc : newValue_PaymentAmountLc - originalValue_PaymentAmountLc;

        gvPaymentInApDetailLabelPaymentAmountLcSum.cpValue = (parseFloat(gvPaymentInApDetailLabelPaymentAmountLcSum.cpValue) + dif_PaymentAmountLc).toFixed(2);
        gvPaymentInApDetailLabelPaymentAmountLcSum.SetValue(gvPaymentInApDetailLabelPaymentAmountLcSum.cpValue.replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));

        AmountDetailLc.SetValue(gvPaymentInApDetailLabelPaymentAmountLcSum.cpValue);

        refreshPayment();
    }

    function gvPaymentInApDetailOnBatchEditStartEditing(s, e) {

    }
    function gvPaymentInApDetailOnBatchEditEndEditing(s, e) {

        gvPaymentInApDetailCalculateSummary(s, e.rowValues, e.visibleIndex, false);
    }


    function gvPaymentInApDetailOnBatchEditRowValidating(s, e) {


    }

</script>





@*
    ------------------------------------------------------------------------------
    ArCoporate
    -------------------------------------------------------------------------------
*@


<script type="text/javascript">

    function gvPaymentInArCorporateDetailPaymentAmountTcOnValueChanged(s, e) {
        var grdView = ASPxClientGridView.Cast("gvPaymentInArCorporateDetail");
        var temp1 = grdView.GetEditValue('PaymentAmountTc') * grdView.GetEditValue('InvoiceCurRate');
        gvPaymentInArCorporateDetailPaymentAmountLc.SetValue(temp1);
    }

    function gvPaymentInArCorporateDetailOnCustomButtonClick(s, e) {
        if (e.buttonID == "deleteButton") {

            s.batchEditApi.StartEdit(e.visibleIndex);
            var rowValues = s.batchEditHelper.GetRowValues(e.visibleIndex);
            gvPaymentInArCorporateDetailCalculateSummary(s, rowValues, e.visibleIndex, true);
            s.DeleteRow(e.visibleIndex);
            s.GetBatchEditHelper().CanUpdate();

        }
    }

    function gvPaymentInArCorporateDetailCalculateSummary(grid, rowValues, visibleIndex, isDeleting) {
        //AmountTc
        var originalValue_PaymentAmountTc = grid.batchEditApi.GetCellValue(visibleIndex, "PaymentAmountTc");

        var newValue_PaymentAmountTc = rowValues[(grid.GetColumnByField("PaymentAmountTc").index)].value;
        var dif_PaymentAmountTc = isDeleting ? -newValue_PaymentAmountTc : newValue_PaymentAmountTc - originalValue_PaymentAmountTc;

        gvPaymentInArCorporateDetailLabelPaymentAmountTcSum.cpValue = (parseFloat(gvPaymentInArCorporateDetailLabelPaymentAmountTcSum.cpValue) + dif_PaymentAmountTc).toFixed(2);
        gvPaymentInArCorporateDetailLabelPaymentAmountTcSum.SetValue(gvPaymentInArCorporateDetailLabelPaymentAmountTcSum.cpValue.replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));

        AmountDetailTc.SetValue(gvPaymentInArCorporateDetailLabelPaymentAmountTcSum.cpValue);

        //PaymentAmountLc
        var originalValue_PaymentAmountLc = grid.batchEditApi.GetCellValue(visibleIndex, "PaymentAmountLc");

        var newValue_PaymentAmountLc = rowValues[(grid.GetColumnByField("PaymentAmountLc").index)].value;
        var dif_PaymentAmountLc = isDeleting ? -newValue_PaymentAmountLc : newValue_PaymentAmountLc - originalValue_PaymentAmountLc;

        gvPaymentInArCorporateDetailLabelPaymentAmountLcSum.cpValue = (parseFloat(gvPaymentInArCorporateDetailLabelPaymentAmountLcSum.cpValue) + dif_PaymentAmountLc).toFixed(2);
        gvPaymentInArCorporateDetailLabelPaymentAmountLcSum.SetValue(gvPaymentInArCorporateDetailLabelPaymentAmountLcSum.cpValue.replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));

        AmountDetailLc.SetValue(gvPaymentInArCorporateDetailLabelPaymentAmountLcSum.cpValue);

        //InvoiceOutstandingAmountTc
        var originalValue_InvoiceOutstandingAmountTc = grid.batchEditApi.GetCellValue(visibleIndex, "InvoiceOutstandingAmountTc");

        var newValue_InvoiceOutstandingAmountTc = rowValues[(grid.GetColumnByField("InvoiceOutstandingAmountTc").index)].value;
        var dif_InvoiceOutstandingAmountTc = isDeleting ? -newValue_InvoiceOutstandingAmountTc : newValue_InvoiceOutstandingAmountTc - originalValue_InvoiceOutstandingAmountTc;

        gvPaymentInArCorporateDetailLabelInvoiceOutstandingAmountTcSum.cpValue = (parseFloat(gvPaymentInArCorporateDetailLabelInvoiceOutstandingAmountTcSum.cpValue) + dif_InvoiceOutstandingAmountTc).toFixed(2);
        gvPaymentInArCorporateDetailLabelInvoiceOutstandingAmountTcSum.SetValue(gvPaymentInArCorporateDetailLabelInvoiceOutstandingAmountTcSum.cpValue.replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));

        refreshPayment();
    }

    function gvPaymentInArCorporateDetailOnBatchEditStartEditing(s, e) {

    }
    function gvPaymentInArCorporateDetailOnBatchEditEndEditing(s, e) {

        gvPaymentInArCorporateDetailCalculateSummary(s, e.rowValues, e.visibleIndex, false);
    }


    function gvPaymentInArCorporateDetailOnBatchEditRowValidating(s, e) {


    }

</script>


<script type="text/javascript">

    function btnAddDepositDetailOnClick(s, e) {
        if (Category.GetValue() == 'ArCorporate') {
            var popup = ASPxClientPopupControl.Cast("cflArCorporatePopupListDeposit");

            var gv = ASPxClientGridView.Cast('gvCflArCorporateListDeposit');
            if (gv == null) {
                popup.Show();
            } else {
                popup.SetContentHtml("");
                popup.PerformCallback();
                popup.Show();
            }
        }
    }

    function btnAddCashBackDpDetailOnClick(s, e) {

        var popup = ASPxClientPopupControl.Cast("cflApPopupListCashBackDp");

        var gv = ASPxClientGridView.Cast('gvCflApListCashBackDp');
        if (gv == null) {
            popup.Show();
        } else {
            popup.SetContentHtml("");
            popup.PerformCallback();
            popup.Show();
        }

    }


    function btnAddDetailOnClick(s, e) {
        if (Category.GetValue() == 'ArCorporate') {
            var popup = ASPxClientPopupControl.Cast("cflArCorporatePopupListArInvoiceCorporate");

            var gv = ASPxClientGridView.Cast('gvCflArCorporateListArInvoiceCorporate');
            if (gv == null) {
                popup.Show();
            } else {
                popup.SetContentHtml("");
                popup.PerformCallback();
                popup.Show();
            }
        }

    }


    //gvPaymentInArCorporateDetail
    function gvPaymentInArCorporateDetailOnBeginCallback(s, e) {
        e.customArgs['cbId'] = Id.GetValue();
    }

    function gvPaymentInArCorporateDetailOnEndCallback(s, e) {

        AmountDetailTc.SetValue(gvPaymentInArCorporateDetailLabelPaymentAmountTcSum.cpValue);
        AmountDetailLc.SetValue(gvPaymentInArCorporateDetailLabelPaymentAmountLcSum.cpValue);
    }

    //gvPaymentInApDetail
    function gvPaymentInApDetailOnBeginCallback(s, e) {
        e.customArgs['cbId'] = Id.GetValue();
    }

    function gvPaymentInApDetailOnEndCallback(s, e) {
        var gv = s;
        var total = 0;
        for (var i = 0; i < gv.keys.length; i++) {
            gv.batchEditApi.StartEdit(i);
            total = total + gv.GetEditValue('PaymentAmountTc');
        }
        gv.GetBatchEditHelper().CanUpdate();

        gvPaymentInApDetailLabelPaymentAmountTcSum.cpValue = total.toFixed(2);
        gvPaymentInApDetailLabelPaymentAmountTcSum.SetValue(gvPaymentInApDetailLabelPaymentAmountTcSum.cpValue.replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));

        AmountDetailTc.SetValue(gvPaymentInApDetailLabelPaymentAmountTcSum.cpValue);


        total = 0;
        for (var i = 0; i < gv.keys.length; i++) {
            gv.batchEditApi.StartEdit(i);
            total = total + gv.GetEditValue('PaymentAmountLc');
        }
        gv.GetBatchEditHelper().CanUpdate();

        gvPaymentInApDetailLabelPaymentAmountLcSum.cpValue = total.toFixed(2);
        gvPaymentInApDetailLabelPaymentAmountLcSum.SetValue(gvPaymentInApDetailLabelPaymentAmountLcSum.cpValue.replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));

        AmountDetailLc.SetValue(gvPaymentInApDetailLabelPaymentAmountLcSum.cpValue);


        refreshPayment();

    }


</script>



<script type="text/javascript">
    function isRowDelete(deletedRowKeys, keyValue) {
        var result = false;
        $.each(deletedRowKeys, function (name, value) {
            if (value == keyValue) {
                result = true;
                return false;
            }
        });

        return result;
    }


    function btnAddArCorporateRefreshOutsandingOnClick(s, e) {



        var key = Id.GetValue();

        $.ajax({
            type: "POST",
            url: '@Url.Action("RefreshOutsandingArCorporate", "PaymentIn")',
            data: { Id: key },
            beforeSend: function () {
                OnBegin();
            },
            success: function (response) {
                gvPaymentInArCorporateDetail.PerformCallback();
            },
            error: function (jqXhr, textStatus, errorThrown) {
                OnFailure(jqXhr, textStatus, errorThrown)
            },
            complete: function () {
                OnComplete()
            }
        });


    }

</script>








@Html.Partial("Partial/PaymentIn_Form_Btn_Partial")

@using (Ajax.BeginForm("mantap", "PaymentIn", null,
new AjaxOptions
{
    HttpMethod = "POST",
    OnBegin = "OnBegin",
    OnSuccess = "OnSuccessMsgBox",
    OnFailure = "OnFailure",
    OnComplete = "OnComplete",
    UpdateTargetId = "contentForm",
    InsertionMode = InsertionMode.Replace,

},
new
{
    id = "formDetail",
    @class = "edit_form",
    style = "height: 200px; width: 100%;",
    autocomplete = "off"
}))
{
    <div id="contentForm">
        @Html.Partial("Partial/PaymentIn_Form_Partial")
    </div>
}


@Html.DevExpress().LoadingPanel(
    settings =>
    {
        settings.Name = "loadingPanel";
        settings.Modal = true;
        settings.ContainerElementID = "contentForm";
        settings.Styles.LoadingDiv.BackColor = System.Drawing.Color.White;
    }).GetHtml()


@Html.Partial("Partial/PaymentIn_Panel_List_Partial")


@*
    -------------------------------------------------
    Print
    -------------------------------------------------
*@

@Html.Partial("~/Views/_CrystalReport/Layout/Print_Panel_Partial.cshtml")


@*-------------------------------------------------
    ViewJe
    -------------------------------------------------*@

@Html.Partial("~/Views/_ViewJe/_ViewJe/Partial/_ViewJePanel.cshtml")



@*
    -----------------------------------------------------------------------------
    gvCflVendorList
    -----------------------------------------------------------------------------
*@

<script type="text/javascript">

    function BtnCflVendorPopupListOnClick(s, e) {
        cflBpPopupListVendor.Show();
    }


</script>

@{
    var cflBpVendor_ParamModel = new CflBp_ParamModel();
    cflBpVendor_ParamModel.Name = "Vendor";
    cflBpVendor_ParamModel.Type = "Vendor";
    cflBpVendor_ParamModel.Header = "Vendor";
    cflBpVendor_ParamModel.SqlWhere = "AND OCRD___.CardType='S' AND ISNULL(OCRD___.FrozenFor,'N') = 'N' ";
    cflBpVendor_ParamModel.IsMulti = "N";
}



<script type="text/javascript">


    function OnClickChoose_CflBpVendor(s, e, data) {
        var VendorCode = ASPxClientTextBox.Cast("VendorCode");
        VendorCode.SetValue(data.OCRD___.CardCode);
        var VendorName = ASPxClientTextBox.Cast("VendorName");
        VendorName.SetValue(data.OCRD___.CardName);
        VendorAddress.SetValue(data.OCRD___.Address);
        cflBpPopupListVendor.Hide();
    }


</script>
@Html.Partial("~/Views/_Cfl/_CflBp/Partial/_CflBp_Panel_List_Partial.cshtml", cflBpVendor_ParamModel)



@*
    -----------------------------------------------------------------------------
    gvCflContactPersonList
    -----------------------------------------------------------------------------
*@

<script type="text/javascript">

    function BtnCflContactPersonPopupListOnClick(s, e) {
        cflContactPersonPopupListPaymentIn.Show();
    }


</script>

@{
    var cflContactPerson_ParamModel = new CflContactPerson_ParamModel();
    cflContactPerson_ParamModel.Name = "PaymentIn";
    cflContactPerson_ParamModel.Type = "PaymentIn";
    //cflContactPerson_ParamModel.Header = "Vendor";
    cflContactPerson_ParamModel.SqlWhere = "";
    cflContactPerson_ParamModel.IsMulti = "N";
}



<script type="text/javascript">


    function OnClickChoose_CflContactPersonPaymentIn(s, e, data) {
        var ContactPersonId = ASPxClientTextBox.Cast("ContactPersonId");
        ContactPersonId.SetValue(data.OCPR___.CntctCode);
        var ContactPersonName = ASPxClientTextBox.Cast("ContactPersonName");
        ContactPersonName.SetValue(data.OCPR___.Name);

        cflContactPersonPopupListPaymentIn.Hide();
    }


</script>
@Html.Partial("~/Views/_Cfl/_CflContactPerson/Partial/_CflContactPerson_Panel_List_Partial.cshtml", cflContactPerson_ParamModel)



@*
    -----------------------------------------------------------------------------
    gvCflAccountCoaNameList
    -----------------------------------------------------------------------------
*@

@{
    var cflCoaAccount_ParamModel = new CflCoa_ParamModel();
    cflCoaAccount_ParamModel.Name = "Account";
    cflCoaAccount_ParamModel.Type = "PaymentIn";
    cflCoaAccount_ParamModel.Header = "";
    cflCoaAccount_ParamModel.SqlWhere = "AND OACT___.Postable='Y'";
    cflCoaAccount_ParamModel.IsMulti = "N";
}



<script type="text/javascript">


    function OnClickChoose_CflCoaAccount(s, e, data) {
        var CoaCode = ASPxClientTextBox.Cast("gvPaymentInAccountDetail_CoaCode");
        CoaCode.SetValue(data.OACT___.ActId);

        var CoaName = ASPxClientTextBox.Cast("gvPaymentInAccountDetail_CoaName");
        CoaName.SetValue(data.OACT___.AcctName);

        cflCoaPopupListAccount.Hide();

    }


</script>
@Html.Partial("~/Views/_Cfl/_CflCoa/Partial/_CflCoa_Panel_List_Partial.cshtml", cflCoaAccount_ParamModel)


@*
    -----------------------------------------------------------------------------
    gvCflCustomerList
    -----------------------------------------------------------------------------
*@

@{
    var cflBp_ParamModel = new CflBp_ParamModel();
    cflBp_ParamModel.Name = "Customer";
    cflBp_ParamModel.Type = "Customer";
    cflBp_ParamModel.Header = "Customer";
    cflBp_ParamModel.SqlWhere = "AND OCRD___.CardType='C' ";
    cflBp_ParamModel.IsMulti = "N";
}



<script type="text/javascript">


    function OnClickChoose_CflBpCustomer(s, e, data) {

        CustomerCode.SetValue(data.OCRD___.CardCode);
        CustomerName.SetValue(data.OCRD___.CardName);
        CustomerAddress.SetValue(data.OCRD___.Address);
        cflBpPopupListCustomer.Hide();

    }


</script>
@Html.Partial("~/Views/_Cfl/_CflBp/Partial/_CflBp_Panel_List_Partial.cshtml", cflBp_ParamModel)



@*
    -----------------------------------------------------------------------------
    gvCflCoaCashList
    -----------------------------------------------------------------------------
*@

@{
    var cflCoaCash_ParamModel = new CflCoa_ParamModel();
    cflCoaCash_ParamModel.Name = "Cash";
    cflCoaCash_ParamModel.Type = "PaymentIn";
    cflCoaCash_ParamModel.Header = "(Cash)";
    cflCoaCash_ParamModel.SqlWhere = "AND OACT___.Postable='Y'";
    cflCoaCash_ParamModel.IsMulti = "N";
}



<script type="text/javascript">

    function BtnCflCoaCashPopupListOnClick(s, e) {
        if (e.buttonIndex == 0) {
            cflCoaPopupListCash.Show();
        } else if (e.buttonIndex == 1) {//clear
            CashCoaCode.SetValue(null);
            CashCoaName.SetValue(null);
        }
    }

    function OnClickChoose_CflCoaCash(s, e, data) {
        var CoaCode = ASPxClientTextBox.Cast("CashCoaCode");
        CoaCode.SetValue(data.OACT___.ActId);
        var CoaName = ASPxClientTextBox.Cast("CashCoaName");
        CoaName.SetValue(data.OACT___.AcctName);

        cflCoaPopupListCash.Hide();

    }


</script>
@Html.Partial("~/Views/_Cfl/_CflCoa/Partial/_CflCoa_Panel_List_Partial.cshtml", cflCoaCash_ParamModel)




@*
    -----------------------------------------------------------------------------
    gvCflCoaTransferList
    -----------------------------------------------------------------------------
*@

@{
    var cflCoaTransfer_ParamModel = new CflCoa_ParamModel();
    cflCoaTransfer_ParamModel.Name = "Transfer";
    cflCoaTransfer_ParamModel.Type = "PaymentIn";
    cflCoaTransfer_ParamModel.Header = "(Transfer)";
    cflCoaTransfer_ParamModel.SqlWhere = "AND OACT___.Postable='Y'";
    cflCoaTransfer_ParamModel.IsMulti = "N";
}



<script type="text/javascript">

    function BtnCflCoaTransferPopupListOnClick(s, e) {
        if (e.buttonIndex == 0) {
            cflCoaPopupListTransfer.Show();
        } else if (e.buttonIndex == 1) {//clear
            TransferCoaCode.SetValue(null);
            TransferCoaName.SetValue(null);
        }

    }

    function OnClickChoose_CflCoaTransfer(s, e, data) {
        var CoaCode = ASPxClientTextBox.Cast("TransferCoaCode");
        CoaCode.SetValue(data.OACT___.ActId);
        var CoaName = ASPxClientTextBox.Cast("TransferCoaName");
        CoaName.SetValue(data.OACT___.AcctName);

        cflCoaPopupListTransfer.Hide();

    }


</script>
@Html.Partial("~/Views/_Cfl/_CflCoa/Partial/_CflCoa_Panel_List_Partial.cshtml", cflCoaTransfer_ParamModel)


@*
    -----------------------------------------------------------------------------
    gvCflCoaCheckList
    -----------------------------------------------------------------------------
*@

@{
    var cflCoaCheck_ParamModel = new CflCoa_ParamModel();
    cflCoaCheck_ParamModel.Name = "Check";
    cflCoaCheck_ParamModel.Type = "PaymentIn";
    cflCoaCheck_ParamModel.Header = "(Check)";
    cflCoaCheck_ParamModel.SqlWhere = "AND OACT___.Postable='Y'";
    cflCoaCheck_ParamModel.IsMulti = "N";
}



<script type="text/javascript">


    function OnClickChoose_CflCoaCheck(s, e, data) {
        var CoaCode = ASPxClientTextBox.Cast("CheckCoaCode");
        CoaCode.SetValue(data.OACT___.ActId);
        var CoaName = ASPxClientTextBox.Cast("CheckCoaName");
        CoaName.SetValue(data.OACT___.AcctName);

        cflCoaPopupListCheck.Hide();

    }


</script>
@Html.Partial("~/Views/_Cfl/_CflCoa/Partial/_CflCoa_Panel_List_Partial.cshtml", cflCoaCheck_ParamModel)



@*
    -----------------------------------------------------------------------------
    gvCflBankCheckList
    -----------------------------------------------------------------------------
*@

@{
    var cflBankCheck_ParamModel = new CflBankCheck_ParamModel();
    cflBankCheck_ParamModel.Name = "BankCode";
    cflBankCheck_ParamModel.Type = "PaymentIn";
    cflBankCheck_ParamModel.Header = "";
    cflBankCheck_ParamModel.SqlWhere = "";
    cflBankCheck_ParamModel.IsMulti = "N";
}



<script type="text/javascript">


    function OnClickChoose_CflBankCheckBankCode(s, e, data) {
        var BankCode = ASPxClientTextBox.Cast("gvPaymentInCheckDetail_BankCode");
        BankCode.SetValue(data.ODSC___.BankCode);

        cflBankCheckPopupListBankCode.Hide();

    }


</script>
@Html.Partial("~/Views/_Cfl/_CflBankCheck/Partial/_CflBankCheck_Panel_List_Partial.cshtml", cflBankCheck_ParamModel)




@*
    -----------------------------------------------------------------------------
    gvCflCreditCardList
    -----------------------------------------------------------------------------
*@

@{
    var cflCreditCard_ParamModel = new CflCreditCard_ParamModel();
    cflCreditCard_ParamModel.Name = "PaymentIn";
    cflCreditCard_ParamModel.Type = "PaymentIn";
    cflCreditCard_ParamModel.Header = "";
    cflCreditCard_ParamModel.SqlWhere = "";
    cflCreditCard_ParamModel.IsMulti = "N";
}


<script type="text/javascript">

    function OnClickChoose_CflCreditCardPaymentIn(s, e, data) {
        var CreditCardId = ASPxClientTextBox.Cast("gvPaymentInCcDetail_CreditCardId");
        CreditCardId.SetValue(data.OCRC___.CreditCard);

        var CoaCode = ASPxClientTextBox.Cast("gvPaymentInCcDetail_CreditCardName");
        CoaCode.SetValue(data.OCRC___.CardName);

        var CoaCode = ASPxClientTextBox.Cast("gvPaymentInCcDetail_CcCoaCode");
        CoaCode.SetValue(data.OACT___.ActId);


        var CoaName = ASPxClientTextBox.Cast("gvPaymentInCcDetail_CcCoaName");
        CoaName.SetValue(data.OACT___.AcctName);


        cflCreditCardPopupListPaymentIn.Hide();

    }


</script>
@Html.Partial("~/Views/_Cfl/_CflCreditCard/Partial/_CflCreditCard_Panel_List_Partial.cshtml", cflCreditCard_ParamModel)




@*
    -----------------------------------------------------------------------------
    gvCflCcCoaNameList
    -----------------------------------------------------------------------------
*@

@{
    var cflCcCoaAccount_ParamModel = new CflCoa_ParamModel();
    cflCcCoaAccount_ParamModel.Name = "CreditCard";
    cflCcCoaAccount_ParamModel.Type = "PaymentIn";
    cflCcCoaAccount_ParamModel.Header = "";
    cflCcCoaAccount_ParamModel.SqlWhere = "AND OACT___.Postable='Y'";
    cflCcCoaAccount_ParamModel.IsMulti = "N";
}



<script type="text/javascript">
    function OnClickChoose_CflCoaAccount(s, e, data) {
        var CoaCode = ASPxClientTextBox.Cast("gvPaymentInCcDetail_CcCoaCodeCombo");
        CoaCode.SetValue(data.OACT___.ActId);

        var CoaName = ASPxClientTextBox.Cast("gvPaymentInCcDetail_CcCoaName");
        CoaName.SetValue(data.OACT___.AcctName);

        cflCoaPopupListCreditCard.Hide();

    }


</script>
@Html.Partial("~/Views/_Cfl/_CflCoa/Partial/_CflCoa_Panel_List_Partial.cshtml", cflCcCoaAccount_ParamModel)




@*
    -----------------------------------------------------------------------------
    gvCflCoaCashBackList
    -----------------------------------------------------------------------------
*@

@{
    var cflCoaCashBack_ParamModel = new CflCoa_ParamModel();
    cflCoaCashBack_ParamModel.Name = "CashBack";
    cflCoaCashBack_ParamModel.Type = "PaymentIn";
    cflCoaCashBack_ParamModel.Header = "(Cash)";
    cflCoaCashBack_ParamModel.SqlWhere = "AND OACT___.Postable='Y'";
    cflCoaCashBack_ParamModel.IsMulti = "N";
}



<script type="text/javascript">


    function OnClickChoose_CflCoaCashBack(s, e, data) {
        var CoaCode = ASPxClientTextBox.Cast("CashBackCoaCode");
        CoaCode.SetValue(data.OACT___.ActId);
        var CoaName = ASPxClientTextBox.Cast("CashBackCoaName");
        CoaName.SetValue(data.OACT___.AcctName);

        cflCoaPopupListCashBack.Hide();

    }


</script>
@Html.Partial("~/Views/_Cfl/_CflCoa/Partial/_CflCoa_Panel_List_Partial.cshtml", cflCoaCashBack_ParamModel)


@*
    -----------------------------------------------------------------------------
    gvCflArCorporateList
    -----------------------------------------------------------------------------
*@


@*@{
        var cflArCorporate_ParamModel = new CflArCorporate_ParamModel();
        cflArCorporate_ParamModel.Name = "ArInvoiceCorporate";
        cflArCorporate_ParamModel.Type = "PaymentIn";
        cflArCorporate_ParamModel.Header = "";

        cflArCorporate_ParamModel.IsMulti = "Y";
    }



    <script type="text/javascript">



        function OnClickChoose_CflArCorporateArInvoiceCorporate(s, e) {
            gvCflArCorporateListArInvoiceCorporate.GetSelectedFieldValues('Temp_ArCorporate___.TransKey', GetSelectedFieldValuesCallback_CflArCorporateArInvoiceCorporate);
        }


        function GetSelectedFieldValuesCallback_CflArCorporateArInvoiceCorporate(values) {
            cflArCorporatePopupListArInvoiceCorporate.Hide();

            key = Id.GetValue();

            $.ajax({
                type: "POST",
                url: '@Url.Action("ChooseArCorporate", "PaymentIn")',
                data: { Id: key, Data: values },
                beforeSend: function () {
                    OnBegin();
                },
                success: function (response) {
                    gvPaymentInArCorporateDetail.PerformCallback();
                },
                error: function (jqXhr, textStatus, errorThrown) {
                    OnFailure(jqXhr, textStatus, errorThrown)
                },
                complete: function () {
                    OnComplete()
                }
            });

        }

    </script>
    @Html.Partial("~/Views/_Cfl/_CflArCorporate/Partial/_CflArCorporate_Panel_List_Partial.cshtml", cflArCorporate_ParamModel)*@
